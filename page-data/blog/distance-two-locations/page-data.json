{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blog/distance-two-locations/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Enjeck's Personal Website","author":"Enjeck Cleopatra"}},"mdx":{"id":"3840f9e2-4d44-5fc5-b1c9-4e64aa38417d","excerpt":"The most popular way of calculating the distance between two points on a \nsphere is using the Haversine equation. \nIf you have the coordinates (that isâ€¦","frontmatter":{"title":"How to calculate the distance between two locations using JavaScript","date":"September 25, 2021"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to calculate the distance between two locations using JavaScript\",\n  \"date\": \"2021-09-25\",\n  \"categories\": [\"html\", \"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The most popular way of calculating the distance between two points on a\\nsphere is using the Haversine equation.\\nIf you have the coordinates (that is; longitude and latitude) of the the starting and\\ndestination locations, you can use this equation to calculate it.\\nHere\\u2019s how to do calculate the distance in kilometers between two locations using\\nJavaScript and the geolocation API. \"), mdx(\"p\", null, \"By default, coordinates (gotten using the Geolocation API) are given in degrees.\\nWe need them in radians for the formula. Here\\u2019s our conversion function: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Convert from degrees to radians\\nfunction degreesToRadians(degrees) {\\n  var radians = (degrees * Math.PI)/180;\\n  return radians;\\n}\\n\")), mdx(\"p\", null, \"Here\\u2019s the function that does the distance calculation using coordinates (longitudes and latitudes).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Function takes two objects, that contain coordinates to a starting and destination location.\\nfunction calcDistance (startingCoords, destinationCoords){\\n  let startingLat = degreesToRadians(startCoords.latitude);\\n  let startingLong = degreesToRadians(startCoords.longitude);\\n  let destinationLat = degreesToRadians(destCoords.latitude);\\n  let destinationLong = degreesToRadians(destCoords.longitude);\\n\\n  // Radius of the Earth in kilometers\\n  let radius = 6571;\\n\\n  // Haversine equation\\n  let distanceInKilometers = Math.acos(Math.sin(startingLat) * Math.sin(destinationLat) +\\n  Math.cos(startingLat) * Math.cos(destinationLat) *\\n  Math.cos(startingLong - destinationLong)) * radius;\\n}\\n  return distanceInKilometers;\\n}\\n\")), mdx(\"p\", null, \"Now, you can the call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"calcDistance\"), \" function and pass it any two coordinates.\\nFor example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let sCoords = {\\nlatitude: 58.39343;\\nlongitude: -259.2627;\\n}\\n\\nlet dCoords = {\\nlatitude: 43.8394;\\nlongitude: -129.3984;\\n}\\nlet dist = calcDistance(sCoords, dCoords)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/blog/distance-two-locations/","previous":{"id":"e666067d-dd13-59d0-bd0c-d5671833a358","fields":{"slug":"/blog/geolocation-api/"},"frontmatter":{"title":"How to get a someone's location using the Geolocation API"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to get a someone's location using the Geolocation API\",\n  \"date\": \"2021-09-25\",\n  \"categories\": [\"html\", \"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Knowing a user\\u2019s location can be a very important feature of a web app.\\nYou can use the location information to personalise the user experience,\\ngive users directions, suggest friends or events in a person\\u2019s locality, or to\\npower a particular feature. \"), mdx(\"p\", null, \"Whenever you want to build web pages that are location-aware,\\nJavaScript\\u2019s Geolocation API is great tool. If the user permits\\n(the user give the browser permission to access their location), you can pinpoint\\ntheir city, or even more precisely, the street they live in.\"), mdx(\"p\", null, \"Don\\u2019t confuse the Geolocation API with Google Maps.\\nThey are different in many ways. Google Maps API is a library that provides access\\nto Google Maps features like displaying location in a map, or giving directions.\\nWhereas, the Geolocation API\\u2019s primary purpose is to give information about a person\\u2019s\\nposition on Earth. \"), mdx(\"h3\", null, \"How the Geolocation API works\"), mdx(\"p\", null, \"To get a person\\u2019s location, the Geolocation API relies on latitudes and longitudes making a coordinate system.\\nLatitudes and longitudes are imaginary lines (you\\u2019ll see them drawn on globes) that cover\\nthe earth and help with positioning. Latitudes indicate northern/southern points on the\\nEarth, and longitude eastern/western. Every place on Earth has a longitude/latitude value\\ncorresponding to its position on planet Earth. For example, New York City is somewhere around\\nlatitude 40 and longitude -70.\"), mdx(\"p\", null, \"Not only smartphones are location-aware.\\nNowadays, almost every eleectronic device can be made location-aware, even a desktop computer.\\nYou may be wondering how a browser running on a desktop computer can determine its location\\nwhen it doesn\\u2019t have a GPS. Browsers have other ways of  finding location without the use of\\nlocation technologies like GPS.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"GPS (Global Positioning System)\"), \": Mainly used by modern mobile devices, it can provide\\nhigh-accuracy location information. It uses satellites and can also provide information on altitude and wind speed. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"IP Address\"), \": Every device on the internet has an IP Address. This IP can be mapped to an\\nexternal database to derive a person\\u2019s physical location. This method can work anywhere,\\nbut is is not very accurate. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Cell phone triangulation\"), \": This approach uses your distance from cell phone towers to\\ncalculate your location. It is pretty accurate, and has the advantage of working indoors,\\nunlike GPS. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"WiFi\"), \": Wi-Fi positioning is based on using access points to triangulate location.\\nIt is accurate, fast and can work indoors. \")), mdx(\"p\", null, \"When building basic geolocation web apps, you don\\u2019t have to concern yourself with all these\\nvarious geolocation tactics. Different browsers handle it in their own way. \"), mdx(\"p\", null, \"Let\\u2019s begin using the Geolocation API. We\\u2019ll try to find out where you are (or at least, where your\\nbrowser thinks you are). \"), mdx(\"p\", null, \"Save the following starter HTML code in a file. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<!doctype html>\\n  <html>\\n  <head>\\n    <meta charset=\\\"utf-8\\\">\\n    <title>My Location</title>\\n    <script src=\\\"location.js\\\"></script>\\n    <link rel=\\\"stylesheet\\\" href=\\\"myLoc.css\\\">\\n  </head>\\n  <body>\\n    <div id=\\\"location\\\">\\n    </div>\\n  </body>\\n  </html>\\n\")), mdx(\"p\", null, \"Go ahead a create \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"location.js\"), \" file, inside of which we will write the actual Geolocation code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"/* Call the function after the page is done loading. */\\nwindow.onload = myLocation;\\n\\nfunction myLocation() {\\n\\n/* Check if the browser supports the Geolocation API. If it does, then \\nthe geolocation property exists, and the condition evaluates to true. The \\nnavigator.geolocation property is an object that contains the whole geolocation API */\\n  if (navigator.geolocation){\\n    /* Call the getCurrentPosition method and pass it a function, showLocation, which \\n    we shall soon implement. An API is basically an object with properties and methods. \\n    The Geolocation API has the getCurrentPosition method, which handles the job of getting \\n    the browser's location.*/ \\n    navigator.geolocation.getCurrentPosition(showLocation);\\n  }\\n  else {\\n    // If there's no geolocation support, show an alert\\n    alert(\\\"Sorry, your browser does not support geolocation.\\\"); \\n  }\\n}\\n\\n/* This function is passed a position, containing latitude and longitude values */\\nfunction showLocation(position){ \\n/* Get the latitude and longitude from the position.coords object */\\nconst latitude = position.coords.latitude;\\nconst.longitude = position.coords.longitude;\\n// Show the location on the page\\ndocument.getElementById(\\\"location\\\").innerHTML = \\n\\\"You are at Latitude: \\\" + latitude +  \\\", Longitude: \\\" + longitude;\\n}\\n\")), mdx(\"p\", null, \"When you run this code (or any other code using the Geolocation API) for the first time,\\nthe browser requests to access your permission. This security check is for privacy reasons,\\npreventing a malicious app from accessing your location without the user\\u2019s permission. \"), mdx(\"p\", null, \"That\\u2019s it. We\\u2019re done with  getting the user\\u2019s location. \"), mdx(\"h3\", null, \"A bit more about the getCurrentPostion() method\"), mdx(\"p\", null, \"Although not shown in the previous code, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getCurrentPostion\"), \" method can take three parameters.\\nThe last two parameters are optional:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"getCurrentPosition(successHandler, errorHandler, options);\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"successHandler\"), \" function is called if the browser successfully gets your location. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"errorHandler\"), \" isIt accepts parameters \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"enableHighAccuracy\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"timeout\"), \" (the maximum time the browser can\\ntake to determine its location), \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"maximumAge\"), \" (the oldest age a location value can reach, after\\nwhich, the browser needs always recalculate the location\\nwhenever getCurrentPostion is called. called if the browser can\\u2019t determine your location. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"options\"), \" parameter is used for controlling how the geolocation computes its value.  \")), mdx(\"p\", null, \"In the previous example, we called the geolocation object\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getCurrentPosition\"), \" method with\\nan a success handler (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"showLocation\"), \") function. When our success handler, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"showLocation\"), \",\\nis called, it is passed a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"position\"), \" object containing a coordinates object holding the\\nlongitude and latitude, as well as other information about the browser\\u2019s location.\\nThe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"position\"), \" object has a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"coords\"), \" property, which can be used to reference the\\nlatitudes and longitudes. \"), mdx(\"p\", null, \"It works like this: \"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"First, the browser call \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"getCurrentPostion\"), \", which triggers the geolocation API\\nto ask the user for permission to access location. \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If the user accepts, geolocation attempts to get the browser\\u2019s location\\n(via means such as GPS, triangulation, etc discussed earlier), and if successful, it calls\\nthe success handler (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"showLocation\"), \", in the example), and passes it an object with the\\ncoordinates. \")));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"e1b144a9-ca1f-5b3c-9c8b-c7c976ea91dc","fields":{"slug":"/blog/predict-change-differential-equations/"},"frontmatter":{"title":"Predictive modeling of weight changes using differential equations"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Predictive modeling of weight changes using differential equations\",\n  \"date\": \"2021-11-08\",\n  \"categories\": [\"math\", \"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Inspired by my own challenges with weight fluctuations, I wanted to explore how weight changes depending on calorie consumption. I recently learned about differential equations in one of my math classes, and this seemed like a great way to apply the knowledge learned. \"), mdx(\"p\", null, \"Try out the final product \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"\"\n  }, \"here\"), \".\"), mdx(\"p\", null, \"View the code on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"\"\n  }, \"GitHub\"), \".\"), mdx(\"h2\", null, \"The mathematical model\"), mdx(\"p\", null, \"Differential equations have many applications in the real world.\\nThey are especially useful whenever you want to model how a system changes with respect to something, usually time. It can be a mechanical system like a pendulum, a dynamic system like the interaction of planets in space, an economic system like population decline/explosion, or even a biological system like human weight changes. The idea was to apply differential equations to build a model for predicting weight change based on calories, and then build a web application around this model, so users can enter their information and see how their weight might change per month over time. This data will be visualized using a table and a line graph. \"), mdx(\"p\", null, \"Initially, I considered basing my model on energy expenditure per kilogram. The daily rate of energy expenditure is between 35 and 45 calories per kg per day, depending on the person\\u2019s sex, age, activity level, and other factors. I didn\\u2019t know how to adjust this daily energy expenditure to reflect these factors. For simplicity, I could have just assumed that a person\\u2019s daily average energy expenditure is the mean of 35 and 45, which is 40 calories per kg per day. Rather than make this assumption, I decided to use the basal metabolic rate. \"), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Basal_metabolic_rate\"\n  }, \"basal metabolic rate (BMR\"), \" is the rate of energy expenditure per unit time by endothermic animals at rest. The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Basal_metabolic_rate#BMR_estimation_formulas\"\n  }, \"Mifflin St Jeor equation\"), \" is considered one of the most accurate formula to calculate BMR:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"P = \\\\left({10.0m \\\\over 1kg} + {6.25h\\\\over 1cm} - {5.0a\\\\over 1year} + s \\\\right) \\\\frac{kcal}{day}\"), mdx(\"p\", null, \"where,\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"m\"), \" = body mass in kg\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"h\"), \" = height in cm\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"a\"), \" = age in years\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"s\"), \" = +5 for men and -161 for women\")), mdx(\"p\", null, \"For example, a 25-year-old woman weighing 80kg and 170cm tall would have a BMR of 1576.5 kcal per day. This value is the number of calories her body spends at complete rest. Performing activities like going to work, doing house chores, or exercising do increase the total daily expenditure. Since a normal person doesn\\u2019t spend all day at rest, we can scale the BMR, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"P\"), \", by an \\u201Cactivity factor\\u201D which depends on daily activities. The value of this activity factor varies based on activity: \"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Level of Activity\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Activity factor\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Bed rest (Bedridden - Unconscious)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.0-1.1\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Sedentary (Little to no exercise )\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.2\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Light exercise (1-3 days per week)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.3\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Moderate exercise (3-5 days per week)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.5\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Heavy exercise (6-7 days per week)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.7\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Very heavy exercise (twice per day, extra heavy workouts)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.9\")))), mdx(\"p\", null, \"Including this activity factor, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"f\"), \", into the BMR formula, we get our estimated total daily energy expenditure, which we shall call \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"T\"), \",\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"T = f (10m + 6.25h - 5a + s)\"), mdx(\"p\", null, \"According to the activity factor chart, if the woman in the aforementioned example does light exercise, her total daily energy expenditure is 1.3*1576.5 \\u2248 2050. What does this mean in terms of weight change? It means in order to lose weight, the woman must consume less than 2050 calories daily. Consuming more than 2050 calories will result in weight gain. \"), mdx(\"p\", null, \"No matter the approach taken to create a model for weight change, we shall end up using the first law of thermodynamics to create an equation expressed in terms of exponential decay. \"), mdx(\"p\", null, \"The fact that the equation will have an exponential term (that is, using Euler\\u2019s number, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"e\"), \") makes sense, when you come to think of it. For example, suppose the woman in the example above wants to lose weight. It is estimated that 7700 calories equal one kilogram. If the woman reduces her daily calorie intake to 1500 calories, this produces a deficit of 550 calories. Assuming she follows the diet strictly, in 2 weeks (14 days), this woman should accrue a total calorie deficit of 7700, which equates to 1 kilogram lost. Therefore, she should lose 2kg in 4 weeks, 3kgs in 6 weeks, 6kgs in 8 weeks, right? Wrong! The rate of weight change is not constant, because as she loses weight, her BMR changes, which means she must adjust her calorie intake. For this reason, the weight change equation will have an exponential decay term based on time, which governs how weight loss slows down as weight is lost and BMR changes. \"), mdx(\"p\", null, \"The first law of thermodynamics states that: \"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Change\\\\ in\\\\ energy = heat\\\\ added - work\\\\ done\\\\ by\\\\ the\\\\ system\"), mdx(\"p\", null, \"Relating this law to weight change, we have: \"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Change\\\\ in\\\\ weight = calories\\\\ in - calories\\\\ out\"), mdx(\"p\", null, \"Let variable \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"n\"), \" represent the daily calories intake. Calories out is given by the total daily energy expenditure (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"T\"), \") value already calculated earlier:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Net\\\\ daily\\\\ calorie\\\\ surplus/deficit = n - T\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Net\\\\ daily\\\\ calorie\\\\ surplus/deficit = n - f (10m + 6.25h - 5a + s)\"), mdx(\"p\", null, \"Instead of using the variable \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"m\"), \", let\\u2019s replace it with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"w(t)\"), \", which represents the weight after time \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"t\"), \" (in days): \"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Net\\\\ daily\\\\ calorie\\\\ surplus/deficit = n - f (10w(t) + 6.25h - 5a + s)\"), mdx(\"p\", null, \"If we estimate one kilogram to be 7700 calories, then dividing the equation by 7700 gives the weight change:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"weight\\\\ change = \\\\frac{n - f (10w(t) + 6.25h - 5a + s)}{7700}\"), mdx(\"p\", null, \"This change in weight is approximately the derivative of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"w(t)\"), \":\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{dw(t)}{dt} = \\\\frac{n - f (10w(t) + 6.25h - 5a + s)}{7700}\"), mdx(\"p\", null, \"This is a first order ordinary differential equation. We can solve for \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"w(t)\"), \" using the separation method. At first glance, the equation may not look separable, but it is. \"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{dw(t)}{dt} = \\\\frac{n -10fw(t) - f(6.25h - 5a + s)}{7700}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{dw(t)}{dt} = \\\\frac{-10fw(t)}{7700} + \\\\frac{n - f(6.25h - 5a + s)}{7700}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{dw(t)}{dt} = \\\\frac{-fw(t)}{770} + \\\\frac{n - f(6.25h - 5a + s)}{7700}\"), mdx(\"p\", null, \"The differential equation has only two main variables \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"w(t)\"), \" (dependent variable) and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"t\"), \" (independent variable)  because the derivative term says \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, \"\\\\frac{dw(t)}{dt}\"), \". So, the other variables (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"f\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"h\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"a\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"s\"), \") can be temporarily treated as constants so as to make simplification easier:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Let\\\\ k = \\\\frac{n - f(6.25h - 5a + s)}{7700}\"), mdx(\"p\", null, \"Thus, \"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{dw(t)}{dt} = \\\\frac{-fw(t)}{770} + k\"), mdx(\"p\", null, \"To separate, we multiply through by \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"dt\"), \" and divide by \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, \"\\\\frac{-fw(t)}{770} + k\")), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{dw(t)}{{-fw(t)\\\\over 770} + k} = dt\"), mdx(\"p\", null, \"Now, we proceed as we normally would when solving separable ordinary differential equations, by integrating:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\int\\\\frac{dw(t)}{{-fw(t)\\\\over 770} + k} = \\\\int{dt}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\int\\\\frac{1}{{-fw(t)\\\\over 770} + k}dw(t) = \\\\int{dt}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"{1 \\\\over {-f\\\\over 770}} \\\\log \\\\left|{{-fw(t)\\\\over 770} + k}\\\\right| = t + c_{1}\"), mdx(\"p\", null, \"where \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, \"c_1\"), \" is the constant of integration.\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\log \\\\left|{{-fw(t)\\\\over 770} + k}\\\\right| = {-f\\\\over 770} (t + c_{1})\"), mdx(\"p\", null, \"Putting everything in base \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"e\"), \", the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"log\"), \" cancels out and we get:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{-fw(t)}{770} + k = \\\\pm e^{\\\\frac{-f}{770} (t + c_1)}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{-fw(t)}{770} + k = \\\\pm c_1 e^{\\\\frac{-ft}{770}}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{-fw(t)}{770} = \\\\pm c_1 e^{\\\\frac{-ft}{770}} - k\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"-fw(t) = 770(\\\\pm c_1 e^{\\\\frac{-ft}{770}} - k)\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"fw(t) = \\\\pm770 c_1 e^{\\\\frac{-ft}{770}} + 770 k\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Let\\\\ c_2 = \\\\pm770 c_1\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"fw(t) = c_2e^{\\\\frac{-ft}{770}} + 770 k\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(t) = \\\\frac{c_2e^{\\\\frac{-ft}{770}} + 770 k} {f}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(t) = \\\\frac{c_2e^{\\\\frac{-ft}{770}}}{f} + \\\\frac{770 k} {f}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Let\\\\ c = \\\\frac{c_2}{f}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(t) = ce^{\\\\frac{-ft}{770}} + \\\\frac{770 k} {f}\"), mdx(\"p\", null, \"Replacing \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"k\"), \" with its original expression, we get:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(t) = ce^{\\\\frac{-ft}{770}} + \\\\frac{770}{f} \\\\left(\\\\frac{n - f(6.25h - 5a + s)}{7700} \\\\right)\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(t) = ce^{\\\\frac{-ft}{770}} + \\\\frac{n - f(6.25h - 5a + s)}{10f} \"), mdx(\"p\", null, \"We can now solve for the constant \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"c\"), \". For any person, at the starting weight, t = 0 (that is, at day 0). Substituting t=0 in the equation,  we get: \"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(0) = ce^{0} + \\\\frac{n - f(6.25h - 5a + s)}{10f} \"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(0) = c + \\\\frac{n - f(6.25h - 5a + s)}{10f} \"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"c = w(0) - \\\\frac{n - f(6.25h - 5a + s)}{10f} \"), mdx(\"p\", null, \"For any person, given a starting weight \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"w(0)\"), \", number of calories eaten per day \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"n\"), \", activity factor \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"f\"), \", height \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"h\"), \", age \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"a\"), \" and sex \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"s\"), \", we can calculate the constant \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"c\"), \". The value of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"c\"), \" will then be substituted back into the equation, and can be used to calculate the weight after any amount of time, e.g after 1 year (here, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"t\"), \" = 365 days)\"), mdx(\"p\", null, \"Let\\u2019s consider the example woman again. She is 25 years old, initially weighs, 170cm in height and eats 1500 calories daily. \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"f = 1.3\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"h = 170cm\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"s = -161\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"w(0) = 80kg\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a = 25\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"n = 1500\")), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"c = 80 - \\\\frac{1500 - 1.3(6.25(170) - 5(25) -161)}{10(1.3)} \"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"c = 80 - 37.7\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"c = 42.3\"), mdx(\"p\", null, \"Fitting \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"c = 42.3\"), \" into the original equation, we have the following solution for this woman:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(t) = 42.3e^{\\\\frac{-ft}{770}} + \\\\frac{n - f(6.25h - 5a + s)}{10f} \"), mdx(\"p\", null, \"The value of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"c\"), \" varies from person to person, since it is based on personal information like age, height, activity, sex and calorie intake. \"), mdx(\"p\", null, \"For this particular woman, we can now find out her weight after 1 year:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(365) = 42.3e^{\\\\frac{-(1.3)(365)}{770}} + \\\\frac{1500 - 1.3(6.25(170) - 5(25) - 161)}{10(1.3)} \"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(365) = 22.8 + 37.7\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(365) = 60.5\"), mdx(\"p\", null, \"So, after 1 year, this woman\\u2019s weight has dropped from 80kg to 60.5kg. Losing 19.5kg over a year is a pretty realistic prediction. After 2 years, her weight should be 50kg, a difference of 10kg from the first year\\u2019s loss. As you can see, as she loses weight over time, the rate of weight loss slows down. This is how it goes in real life. \"), mdx(\"h2\", null, \"The code\"), mdx(\"p\", null, \"The hard part is done. Now, we can translate the mathematical model into code. Using HTML, CSS and JavaScript, we can build a web app that accepts age, height, current weight, sex and diet as input and then shows a month-by-month prediction (in the form of a table of value and line chart) of how their weight might change over 8 years. Assuming they stick to the diet, of course.\"), mdx(\"h4\", null, \"HTML\"), mdx(\"p\", null, \"For the most part, the HTML code is a series of input fields and an output area. In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<head>\"), \" of the file, there\\u2019s a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" adding the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://d3js.org/\"\n  }, \"D3.js library\"), \", that will be used to draw the line chart. All input fields are marked as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"required\"), \" to ensure that the user fills them out. The age, height, current weight and calories fields are given \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type=number\"), \" to prevent invalid non-numeric entries. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"utf-8\\\" />\\n    <meta http-equiv=\\\"x-ua-compatible\\\" content=\\\"ie=edge\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width\\\" />\\n    <title>Weight change prediction</title>\\n    <link href=\\\"styles.css\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\" />  \\n    <!-- D3 library used to draw line graph -->\\n    <script src=\\\"https://cdn.jsdelivr.net/npm/d3@7\\\"></script>\\n    <script src=\\\"script.js\\\"></script>\\n  </head>\\n<body>\\n  <div id=\\\"main\\\">\\n    <div class=\\\"intro\\\">\\n    <h1>Weight change prediction</h1>\\n    <p> If you eat X number of calories a day, will you gain or lose weight? \\n      And how does this weight change look like over time? Let's find out! </p>\\n    </div>\\n    <form id=\\\"form\\\">\\n      <!-- Series of input fields -->\\n      <label for=\\\"age\\\">Enter your age (in years): </label>\\n      <br />\\n      <input placeholder=\\\"e.g 25\\\" type=\\\"number\\\" id=\\\"age\\\" required />\\n      <br />\\n      <label for=\\\"weight\\\">Enter your current weight (in kg): </label>\\n      <br />\\n      <input\\n        type=\\\"number\\\"\\n        id=\\\"weight\\\"\\n        required\\n      />\\n      <br />\\n      <label for=\\\"height\\\">Enter your height (in cm): </label>\\n      <br />\\n      <input\\n        type=\\\"number\\\"\\n        id=\\\"height\\\"\\n        required\\n      />\\n      <br />\\n      <label for=\\\"diet\\\">How many calories will you eat daily?: </label>\\n      <br />\\n      <input\\n        type=\\\"number\\\"\\n        id=\\\"diet\\\"\\n        required\\n      />\\n      <br />\\n      <div>\\n        <p>Enter your sex:</p>\\n        <input type=\\\"radio\\\" id=\\\"sexChoice1\\\" name=\\\"sex\\\" value=\\\"male\\\" required />\\n        <label for=\\\"sexChoice1\\\">Male</label>\\n\\n        <input\\n          type=\\\"radio\\\"\\n          id=\\\"sexChoice2\\\"\\n          name=\\\"sex\\\"\\n          value=\\\"female\\\"\\n          required\\n        />\\n        <label for=\\\"sexChoice2\\\">Female</label>\\n      </div>\\n      <label for=\\\"activity\\\">How many calories will you eat daily?: </label>\\n      <br />\\n      <select name=\\\"activity\\\" id=\\\"activity\\\" required>\\n        <option value=\\\"sedentary\\\">Sedentary (Little to no exercise )</option>\\n        <option value=\\\"light-exercise\\\">\\n          Light exercise (1-3 days per week)\\n        </option>\\n        <option value=\\\"moderate-exercise\\\">\\n          Moderate exercise (3-5 days per week)\\n        </option>\\n        <option value=\\\"heavy-exercise\\\">\\n          Heavy exercise (6-7 days per week)\\n        </option>\\n        <option value=\\\"v-heavy-exercise\\\">\\n          Very heavy exercise (twice per day, extra heavy workouts)\\n        </option>\\n      </select>\\n      <br />\\n      <!-- Submit button -->\\n      <input type=\\\"submit\\\" value=\\\"Predict\\\" id=\\\"predict-btn\\\" />\\n    </form>\\n    <div id =\\\"output\\\">\\n      <h2 class=\\\"output-text\\\"> Predictions over 100 months (~8 years)</h2>\\n\\n      <!-- Output area for the line chart-->\\n      <h3 class=\\\"output-text\\\"> Line chart</h3>\\n    <div id=\\\"line-chart\\\">\\n    </div>\\n\\n    <!-- Output area for the table of chart-->\\n    <h3 class=\\\"output-text\\\"> Table of values</h3>\\n    <div id=\\\"table\\\"></div>\\n  </div>\\n  </div>\\n  \\n</body>\\n</html>\\n\")), mdx(\"h4\", null, \"CSS\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \".top-menu {\\n    padding: 20px 5%;\\n    display: flex;\\n    justify-content: flex-end;\\n}\\n\\n.top-menu a {\\n    font-weight: bold;\\n}\\n\\n#main {\\n    max-width: 1000px;\\n    margin: auto;\\n    padding: 10px;\\n    font-family:'Courier New', Courier, monospace;\\n    scroll-behavior: smooth;\\n}\\n\\n\\n.intro h1 {\\n    text-align: center;\\n    font-weight: bold;\\n    color:blueviolet;\\n    text-shadow: 1px 1px 1px black;\\n    text-transform: uppercase;\\n}\\n\\n.intro p {\\n    font-size: 20px;\\n    margin-bottom: 40px;\\n}\\n\\n#form {\\n    padding: 20px;\\n    background: #eee;\\n}\\n\\n#form input, select {\\n    padding: 5px;\\n    font-size: 16px;\\n    margin-bottom: 20px;\\n}\\n\\n#form label {\\n    line-height: 30px;\\n}\\n\\n#form #predict-btn {\\n    outline: non;\\n    border: 0;\\n    background:blueviolet;\\n    padding: 10px 40px;\\n    margin-top: 20px;\\n    color: #fff;\\n    text-transform: uppercase;\\n    cursor: pointer;\\n    font-weight: bold;\\n}\\n\\n#output, #line-chart {\\n    width: 100%;\\n    height: auto;\\n    margin: auto;\\n}\\n\\n#line-chart{\\n    display: flex;\\n    justify-content: center;\\n    margin-bottom: 40px;\\n}\\n\\nh2.output-text {\\n    color:blueviolet;\\n    text-decoration: none;\\n}\\n\\n.output-text {\\n    margin-top: 50px;\\n    text-align: center;\\n    text-decoration: underline;\\n    /* Hide the output area text by default*/\\n    display: none;\\n}\\n\\ntable {\\n    font-family: arial, sans-serif;\\n    border-collapse: collapse;\\n    max-width: 1000px;\\n    margin: auto;\\n    margin-bottom: 40px;\\n  }\\n\\n  td,\\n  th {\\n    border: 1px solid #dddddd;\\n    text-align: left;\\n    padding: 8px;\\n    width: 25%;\\n  }\\n  .red {\\n    color: red;\\n  }\\n  .green {\\n    color: green;\\n  }\\n\")), mdx(\"h4\", null, \"JavaScript\"), mdx(\"h3\", null, \"References\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://en.wikipedia.org/wiki/Basal_metabolic_rate\"\n  }, \"https://en.wikipedia.org/wiki/Basal_metabolic_rate\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://clinmedjournals.org/articles/jnmdc/jnmdc-2-016table1.html\"\n  }, \"https://clinmedjournals.org/articles/jnmdc/jnmdc-2-016table1.html\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.researchgate.net/publication/256293379_A_Mathematical_Diet_Model\"\n  }, \"https://www.researchgate.net/publication/256293379_A_Mathematical_Diet_Model\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3975626/\"\n  }, \"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3975626/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://jeffq.com/blog/modeling-weight-loss-with-differential-equations/\"\n  }, \"http://jeffq.com/blog/modeling-weight-loss-with-differential-equations/\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},
    "staticQueryHashes": ["3128451518"]}