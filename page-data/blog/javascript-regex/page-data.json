{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blog/javascript-regex/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Enjeck's Personal Website","author":"Enjeck Cleopatra"}},"mdx":{"id":"5cde0a4a-0d39-5571-b866-9742d177f053","excerpt":"Regular expressions are a method to describe patterns in string data. Regular expressions form a tiny, separate language that is part of many languagesâ€¦","frontmatter":{"title":"JavaScript regular expressions crash course","date":"November 11, 2021"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JavaScript regular expressions crash course\",\n  \"date\": \"2021-11-11\",\n  \"categories\": [\"JavaScript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Regular expressions are a method to describe patterns in string data. Regular expressions form a tiny, separate language that is part of many languages, including JavaScript. \"), mdx(\"p\", null, \"They might have a cryptic syntax and often difficult to write, but knowing them is important. Regular expressions are very useful, expectially for processing and inspecting strings. \"), mdx(\"h3\", null, \"Creating a regular expression\"), mdx(\"p\", null, \"In JavaScript, a regular expression is an object, constructed with either the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RegExp\"), \" constructor or with forward slash (/) characters enclosing a pattern as a literal value. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let regExpres1 = new RegExp(\\\"xyz\\\");\\nlet regExpres2 = /xyz/\\n\")), mdx(\"p\", null, \"Both of the above regular expression objects represent a pattern of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"x\"), \" character followed by a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"b\"), \" character followed by a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"c\"), \". \"), mdx(\"p\", null, \"When creating a regular expression using the RegExp constructor, the pattern is written as a normal string. Here, backslashes can be used as usual.\\nWhereas, regular expressions defined using the literal notation and slash deals with backslashes differently. A forward slash starts and ends the pattern, so we have to place a backslash before any forward slash that we want to be part of the pattern. If a backslash is not part of a special character (such as \\\\n, \\\\t), it is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"preserved\"), \" instead of ignored, since they are in strings and therefore will change the meaning of the pattern. Characters like plus signs (+) and question marks (?) have special meanings in regular expressions and need to be preceded by a backslash if you want to indicate the character itself. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let helloQuestion = /hello\\\\?/\\n\")), mdx(\"p\", null, \"Like \\u201Cnormal\\u201D objects, regular expressions have methods. The most common method is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"test\"), \", which accepts a string and returns a Boolean that tells you whether the string matches the pattern in the expression. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"console.log(/xyz/.test(\\\"abcxyz\\\"));\\n// \\u2192 true\\nconsole.log(/xyz/.test(\\\"axyzbc\\\"));\\n// \\u2192 true\\nconsole.log(/xyz/.test(\\\"uvwxzya\\\"));\\n// \\u2192 false\\n\")), mdx(\"p\", null, \"When there are no special characters, a regular expression of characters represent that sequence of characters. In our example, we are testing if \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"xyz\"), \" occurs anywhere in the string. Granted, this is a simple test which can easily be replicated using indexOf. Regular expressions are not made for such simple cases. Their power lie in their ability to allow us express complex patterns. \"), mdx(\"p\", null, \"Assume we want to match a set of characters, say, any latin letter. In regular expressions, placing a set of characters between square brackets makes that part of the regular expression to match any of the characters within the brackets. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"console.log(/[abcdefghijklmnopqrstuvwxyz]/.test(\\\"year 2021\\\"));\\n// \\u2192 true\\n\")), mdx(\"p\", null, \"The above expression matches all strings that contain lowercase latin letters. We can make the expression shorter by using a hyphen (-). A hyphen between two characters between square brackets represent a range of characters. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"console.log(/[a-z]/.test(\\\"year 2021\\\"));\\n// \\u2192 true\\n\")), mdx(\"p\", null, \"We can test for numbers in a similar way:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"console.log(/[0123456789]/.test(\\\"year 2021\\\"));\\n// \\u2192 true\\nconsole.log(/[0-9]/.test(\\\"year 2021\\\"));\\n// \\u2192 true\\n\")), mdx(\"p\", null, \"For a range of characters indicated with a hyphen, the ordering of the characters is determined by their Unicode number. For example, characters \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"a-z\"), \" (codes 97-122) are next to each in the Unicode ordering, and so using range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[a-z]\"), \" includes every character in this range and matches all lowercase latin letters.\"), mdx(\"p\", null, \"In regular expressions, character sets/groups have built-in shorthand for writing them. Digits, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[0-9]\"), \" can be represented as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\d\"), \". There\\u2019s more:\"), mdx(\"p\", null, \"| \\\\d  | A digit character |\\n| \\\\D  | A character that is not a digit |\\n| \\\\w  | An alphanumeric character (\\u201Cword character\\u201D)|\\n| \\\\W  | A nonalphanumeric character |\\n| \\\\s  | Any whitespace character (space, tab, newline, and similar) |\\n| \\\\S  | Any character except for newline | \"), mdx(\"p\", null, \"If we want to match a phone number with format \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"XXX-XXX-XXXX\"), \", here\\u2019s how we can do it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let phoneNum = /\\\\d\\\\d\\\\d-\\\\d\\\\d\\\\d-\\\\d\\\\d\\\\d\\\\d/\\nconsole.log(phoneNum.test(\\\"202-588-6500\\\"));\\n// \\u2192 true\\nconsole.log(phoneNum.test(\\\"67-500-647\\\"));\\n// \\u2192 false\\n\")), mdx(\"p\", null, \"These shorthand codes can also be used within square brakets to indicate a set of characters. For example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[\\\\d]\"), \" represents any digit. When special characters like the period (.) and + are used between square brackets, they lose their special meaning. So, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[.+]\"), \" means any period or plus character. \"), mdx(\"p\", null, \"The caret (^) character lets you invert a set of characters. That is, indicate that you want to match any character except the character(s) in the given set. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let notNumber = /[^\\\\d]/;\\nconsole.log(notNumber.test(\\\"ujdhf345kd\\\"));\\n// \\u2192 true\\nconsole.log(notNumber.test(\\\"3453\\\"));\\n// \\u2192 false\\n\")), mdx(\"p\", null, \"Let\\u2019s revisit out phone number matching code from earlier. The code works. But it looks very clunky and awkward to write. There are too many \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\d\"), \"\\u2019s, which make it difficult to see the pattern we are trying to represent. To match repeating parts of a pattern, such as a sequence of digits, we use the plus sign (+). The plus sign is used after something in a regular expression to indicate that the element may be repeated more than once. The expression \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/\\\\d+/\"), \" matches one or more digit characters. So, we can shorten our code like so:\"), mdx(\"p\", null, \"let phoneNum = /\\\\d+-\\\\d+-\\\\d+/\\nconsole.log(phoneNum.test(\\u201C202-588-6500\\u201D));\\n// \\u2192 true\\nconsole.log(phoneNum.test(\\u201C67-500-647\\u201D));\\n// \\u2192 true\"), mdx(\"p\", null, \"The plus symbol lets a pattern to match at least once. To allow a match of zero or more times, we use the asterisk (*). The star does not stop a pattern matching \\u2014 it just matches zero instances if the pattern does not exist. \"), mdx(\"p\", null, \"console.log(/\\u2018\\\\d\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\u2018/.test(\\u201C\\u2018890\\u2019\\u201D));\\n// \\u2192 true\\nconsole.log(/\\u2018\\\\d\"), \"\\u2018/.test(\\u201D\\u201D\\u201D));\\n// \\u2192 true\"), mdx(\"p\", null, \"The previous phone number code is much more concise, but it also matches other formats in addition to the XXX-XXX-XXXX format we expect it to. That\\u2019s because /\\\\d+/ matches any number of digits. \"), mdx(\"p\", null, \"To specify the number of times a pattern should occur, we use numbers within braces after an element. For example, using {3} after an element specifies that the element should occur exactly three times. We can also specify a range by separating two numbers with a comma. {3, 5} indicates that the element should occur at lease thrice and at most five times. When can specify open-ended ranges by not writing a second number after the comma. Thus, {3,} means three or more times. \"), mdx(\"p\", null, \"Here\\u2019s another modification of our phone number verification code:\"), mdx(\"p\", null, \"let phoneNum = /\\\\d{3}-\\\\d{3}-\\\\d{4}/\\nconsole.log(phoneNum.test(\\u201C202-588-6500\\u201D));\\n// \\u2192 true\\nconsole.log(phoneNum.test(\\u201C67-500-647\\u201D));\\n// \\u2192 false\"), mdx(\"p\", null, \"Phone numbers are usually valid even when they are not hyphenated. We can make the hyphen optional. To make a part of a pattern optional, we use the question mark (?). The question allows a character to occur zero or one times. \"), mdx(\"p\", null, \"let phoneNum = /\\\\d{3}-?\\\\d{3}-?\\\\d{4}/\\nconsole.log(phoneNum.test(\\u201C202-588-6500\\u201D));\\n// \\u2192 true\\nconsole.log(phoneNum.test(\\u201C2025886500\\u201D));\\n// \\u2192 true\"), mdx(\"p\", null, \"In the above example, the pattern matches even when the hyphen character (-) is ommitted. \"), mdx(\"p\", null, \"We enclose multiple elements in parentheses () to treat them as a single element when using operators like + or *. When a part of a regular expression is surrounded by parentheses, it is treated as a a single element by any operations following it. \"), mdx(\"p\", null, \"let santaLaugh = /(ho)+/i;\\nconsole.log(santaLaugh.test(\\u201CHohohoho\\u201D));\\n// \\u2192 true\"), mdx(\"p\", null, \"The + applies to the group -ho- and it matches one or more sequences like it. The -i- character at the end of the expression makes the regular expression case insensitive. This ensures that it matches the uppercase H in the input string, despite the fact that the pattern is all lowercase. \"), mdx(\"p\", null, \"Unlike the -test- method that returns only true or false depending on whether or not the pattern matched, the -exec- (execute) method returns an object with information about the match if a match is found and returns -null- otherwise. \"), mdx(\"p\", null, \"let execMatch = /\\\\d+/.exec(\\u201Cabc 123\\u201D);\\nconsole.log(execMatch);\\n// \\u2192 Array \", \"[ \\u201C123\\u201D ]\", \"\\nconsole.log(execMatch.index);\\n// \\u2192 4\"), mdx(\"p\", null, \"let execMatch2 = /\\\\d+/.exec(\\u201Cabc\\u201D);\\nconsole.log(execMatch2);\\n// \\u2192 null\"), mdx(\"p\", null, \"When we log execMatch, we see an array whose first element is a sequence of the successful match. exec has an -index- property that tells us the position where the successful match begins. \"), mdx(\"p\", null, \"The -match- method for strings behaves like -exec-. \"), mdx(\"p\", null, \"console.log(\\u201Cabc 123\\u201D.match(/\\\\d+/));\\n// \\u2192 Array \", \"[ \\u201C123\\u201D ]\"), mdx(\"p\", null, \"If the regular expression has subexpressions within parentheses, any text matching these subexpressions will be shown in the array. The first element of the array is always the whole match. The next element, if it exists, is the part matched by the first subexpression \\u2014 that is, the subexpression whose opening parenthesis appear first in the expression \\u2014 then the second expression, and so on.\"), mdx(\"p\", null, \"let quoted = /\\u2018(\", mdx(\"sup\", {\n    parentName: \"p\",\n    \"id\": \"fnref-'\"\n  }, mdx(\"a\", {\n    parentName: \"sup\",\n    \"href\": \"#fn-'\",\n    \"className\": \"footnote-ref\"\n  }, \"'\")), \"*)\\u2019/\\nconsole.log(quoted.exec(\\u201CI said \\u2018yes\\u2019 to his proposal\\u201D));\\n// \\u2192 Array \", \"[ \\u201C\\u2018yes\\u2019\\u201D, \\u201Cyes\\u201D ]\"), mdx(\"p\", null, \"When a subexpression grouped in parentheses does not have a match in the inut string (for example, when the subexpression is followed by a question mark), the value -undefined- is pu in it\\u2019s position in the output array. \"), mdx(\"p\", null, \"console.log(/program(mer)?/.exec(\\u201Cprogram\\u201D));\\n// \\u2192 Array \", \"[ \\u201Cprogram\\u201D, undefined ]\", \"\\nconsole.log(/(\\\\w)+/.exec(\\u201Cabc\\u201D));\\n// \\u2192 Array \", \"[ \\u201Cabc\\u201D, \\u201Cc\\u201D ]\"), mdx(\"p\", null, \"To make a match span through an entire string, we use the ^ and $ characters. The dollar sign matches the end of the input string, while the caret matches the start. The expression /^\\\\d+\", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, \"/ matches a string that is made up of numbers from start to end. /^a/ matches a string that starts with the letter a, and /!\"), \"/ matches a string that ends with an exclamation mark. \"), mdx(\"p\", null, \"The marker \\\\b refers to a word boundary, which can be the start or end of the string. It can also refer to any place in the string that has a word character on one side and nonword character on the other side. \"), mdx(\"p\", null, \"console.log(/pp/.test(\\u201Chappy\\u201D));\\n// \\u2192 true\\nconsole.log(/\\\\bpp\\\\b/.test(\\u201Chappy\\u201D));\\n// \\u2192 false\"), mdx(\"p\", null, \"A boundary marker makes a regular expression to match only when a specific condition holds at the point it exists in the pattern. It does not match an actual character. \"), mdx(\"p\", null, \"We use the pipe character (|) indicates a choice between a pattern to its left and that to its right. For example, we can match a text that contains the word \\u201Cwatch\\u201D in either its plural (ending with \\u201Ces\\u201D) form, past tense (ending with \\u201Ced\\u201D) or personal noun (ending with \\u201Cer\\u201D) form. \"), mdx(\"p\", null, \"let word = /\\\\b\\\\watch(es|ed|er)?\\\\b/;\\nconsole.log(word.test(\\u201Cwatch\\u201D));\\n// \\u2192 true\\nconsole.log(word.test(\\u201Cwatched\\u201D));\\n// \\u2192 true\\nconsole.log(word.test(\\u201Cwatcherrr\\u201D));\\n// \\u2192 false\"), mdx(\"p\", null, \"In the example, we use parentheses to limit the section of the expression that the pipe operator should be applied to. \"), mdx(\"p\", null, \"The replace method can be used on strings to replace part of a string with another string. For example:\"), mdx(\"p\", null, \"console.log(\\u201Chaha\\u201D.replace(\\u201Ca\\u201D, \\u201Ce\\u201D));\\n// \\u2192 heha\"), mdx(\"p\", null, \"It is possible to set the first argument of the replace method to be a regular expressions. Here, the first match of the regular expression is replaced. To replace all matches in a string rather than just the first, add the -g- (global) option to the regular expression. \"), mdx(\"p\", null, \"console.log(\\u201Chahehahehe\\u201D.replace(/a/, \\u201Ce\\u201D));\\n// \\u2192 hehehahehe\\nconsole.log(\\u201Chahehahehe\\u201D.replace(/a/g, \\u201Ce\\u201D));\\n// \\u2192 hehehehehe\"), mdx(\"p\", null, \"The above behavior of replacing all matches in a string can be replication using the replaceAll method, without having to use regular expressions at all. The advantage of using regular expressions with the -replace- method is that we can mention matched subexpression groups. For example, say we have two numbers 2 3 and we want to swap their positions to say 3 2 instead:\"), mdx(\"p\", null, \"console.log(\\u201C2 3\\u201D.replace(/(\\\\d+) (\\\\d+)/g, \\u201C$2 $1\\u201D));\\n// \\u2192 3 2\"), mdx(\"p\", null, \"In the above code, the groups (\\\\w+) and (\\\\w+) are associated with the characters $1 and $2 in the replacement string. $1 is replaced by the text matching the first group, $2 by the second group, and it goes on till $9. The entire match can be referenced with $&. \"), mdx(\"p\", null, \"Instead of a string, we may decide to pass a function as the second argument of the -replace- method. for every replacement, the function is called with the matched subexpression groups as arguments, then the value returned is added to the new string. The following code accepts a function as a second argument to replace, which converts specific strings to uppercase. \"), mdx(\"p\", null, \"let phrase = \\u201Cunicef is a humanitarian ngo.\\u201D;\\nlet re = phrase.replace(/\\\\b(unicef|ngo)\\\\b/g, word => word.toUpperCase())\\nconsole.log(re);\"), mdx(\"p\", null, \"When writing your code, you may not know the actual pattern you have to match against. Here, you can dynamically create RegExp objects. Suppose you want to look for a particular word in a sentence and surround it with quotation marks. This word will only be known during program execution, so it is better if we use the RegExp rather that the slash-based notation. \"), mdx(\"p\", null, \"let word = \\u201Chello\\u201D;\\nlet sentence = \\u201CMary says hello.\\u201D;\\nlet re = new RegExp(\\u201D\", \"\\\\\", \"b(\\u201D + word + \\u201C)\", \"\\\\\", \"b\\u201D, \\u201Ci\\u201D);\\nconsole.log(sentence.replace(re, \\u201D\\u2018$1\\u2019\\u201D));\\n// \\u2192 Mary says \\u2018hello\\u2019.\"), mdx(\"p\", null, \"Since we are writing the \\\\b boundary markers as a regular string, We use two backslashes when creating the \\\\b boundary marker in the RegExp constructor. The second argument given to the RegExp constructor holds the options for regular expression, which is \\u201Ci\\u201D for case insensitive in this example. \"), mdx(\"p\", null, \"The indexOf string method returns the position of a character or group of chracters in a string. \"), mdx(\"p\", null, \"console.log(\\u201Chello\\u201D.indexOf(\\u201Ce\\u201D));\\n// \\u2192 1\"), mdx(\"p\", null, \"indexOf does not accept regular expressions. In cases where we want to use regular expressions to determine the index of a character, we can use the -search- method. \"), mdx(\"p\", null, \"console.log(\\u201Cyear 2021\\u201D.search(/\\\\d/));\\n// \\u2192 5\"), mdx(\"p\", null, \"Regular expressions have properties, such as -source- (has the string that the expression was created from) and -lastIndex- (can sometimes control where the next index starts). \"), mdx(\"p\", null, \"We can use the lastIndex property with the exec method to start searching for a match from a specific position in the string. To do this, we must enable the global (-g-) or sticky (-y-) option in the regular expression. \"), mdx(\"p\", null, \"let re = /c/g;\\nre.lastIndex = 5;\\nlet match = re.exec(\\u201Cabcabcabc\\u201D);\\nconsole.log(match.index);\\n// \\u2192 5\\nconsole.log(re.lastIndex);\\n// \\u2192 6\"), mdx(\"p\", null, \"if there\\u2019s a successful match, the -exec- call will automatically update the lastIndex property, given it a value corresponding to the point after the match. If there is no match, lastIndex is treated like in a newly created RegExp opbject and it\\u2019s value is reverted to zero. \"), mdx(\"p\", null, \"Where enabled, the global option ensures that we begin searching for a position where a match starts ahead of the value of lastIndex. Whereas, when the sticky option is enabled, the match can only succeed if it begins directly at lastIndex. \"), mdx(\"p\", null, \"let globalOption = /456/g;\\nconsole.log(globalOption.exec(\\u201C123 456\\u201D));\\n// \\u2192 Array \", \"[ \\u201C456\\u201D ]\", \"\\nlet stickyOption = /456/y;\\nconsole.log(stickyOption.exec(\\u201C123 456\\u201D));\\n// \\u2192 null\"), mdx(\"p\", null, \"Problems can arise from automatic updates to lastIndex when we use the same regular expression value for several calls to -exec-. For example, it might cause a regular expression to start at an index left over from a previous -exec- call. \"), mdx(\"p\", null, \"let word = /ab/g;\\nconsole.log(word.exec(\\u201Ccccccab\\u201D));\\n// \\u2192 Array \", \"[ \\u201Cab\\u201D ]\", \"\\nconsole.log(word.exec(\\u201Ccab\\u201D));\\n// \\u2192 null\"), mdx(\"p\", null, \"The global option affects the way -match- works on strings. Using global, the -exec- method returns an array containing the first matched string, whereas the -match- method returns an array containing all matched strings. \"), mdx(\"p\", null, \"let re = /ah/g;\\nconsole.log(re.exec(\\u201Chahahahaha\\u201D));\\n// \\u2192  Array \", \"[ \\u201Cah\\u201D ]\", \"\\nconsole.log(\\u201Chahahahaha\\u201D.match(re));\\n// \\u2192 Array(4) \", \"[ \\u201Cah\\u201D, \\u201Cah\\u201D, \\u201Cah\\u201D, \\u201Cah\\u201D ]\"), mdx(\"p\", null, \"Global regular expressions are ideal when using the -replace- method and -lastIndex- property. Excercise caution when using global in other cicumstances, as it may have unintended side effects. \"), mdx(\"p\", null, \"Using the exec method and lastIndex, we can loop over matches. Here\\u2019s an example:\"), mdx(\"p\", null, \"let sentence = \\u201CI have 5 chickens, 5 dogs and 8 goats.\\u201D;\\nlet number = /\\\\b\\\\d+\\\\b/g;\\nlet foundNumbers;\\nwhile (foundNumbers = number.exec(sentence)){\\nconsole.log(\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Found number ${foundNumbers[0]} at ${foundNumbers.index}\"), \");\\n// \\u2192  Found number 5 at 7\\n//    Found number 5 at 19\\n//    Found number 8 at 30\"), mdx(\"p\", null, \"In the code above, we use a while loop with condition foundNumbers = number.exec(sentence). This does the match at the start of each iteration of the loop, and then saves its result in a binding (foundNumbers, in this case). The loop stops when no more matches can be found. \"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/blog/javascript-regex/","previous":{"id":"3e7af9a5-4db8-504e-be28-dd6744b8cd45","fields":{"slug":"/blog/ux-writing-tips/"},"frontmatter":{"title":"UX Writing tips for developers and designers"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"UX Writing tips for developers and designers\",\n  \"date\": \"2021-11-11\",\n  \"categories\": [\"UX Writing\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"UX text is the text used on interfaces. The following tips will help you write UX text that will help people using your site satisfy their needs and accomplish their goals.\"), mdx(\"h3\", null, \"1) Write clearly\"), mdx(\"p\", null, \"Do not assume your reader knows the point you\\u2019re trying to make. To get your point across, write carefully. Think about what exactly you want to say and say it in a clear manner. The reader does not want to read a piece of text multiple times before understanding. A quick scan should be enough. People usually quickly scan text rather than read everything, since they lack time and have a short attention span. Therefore, every word you use should be relevant and understandable.\\nHere are some tips to help you write clearly:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use simple words. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use the active voice instead of the passive voice. Aside from making sentences flow better, it makes localization easier. Simpler sentences are easier to translate to other languages. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Be uniform in your choice of possesive adjectives (like my, your, her, our). For instance, don\\u2019t write \\u201CYour account\\u201D, \\u201CMy Music\\u201D in the same menu. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The reader may not know the service or product you are writing about. Don\\u2019t assume they do. Use technical terms sparsely, and when you do, add a short definition or description. Before writing UX text, it helps to list and define the terms to use and those to avoid (such as terms that are difficult to understand, sensitive or confusing). For instance, instead of writing  \\u201CConnection error, server unreachable\\u201D, you might say \\u201CYou are offline. Check your internet connection and retry\\u201D. \")), mdx(\"h3\", null, \"2) Be concise and succint\"), mdx(\"p\", null, \"Surprisingly, it usually takes more time to write a shorter statement than a longer one. It is harder to be concise because of the effort required to condense the important details in a shorter statement. When working on devices with small screens, such as mobile applications, there is little available space. You have to try to fit as much value into the little available space. Here are some tips to help you do this:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Find a way to express concepts more succintly. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use shorter sentences. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You want the important stuff to be read first, so it makes sense to put it at the beginning of the sentence. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"After writing each sentence, read through it and check if there\\u2019s anything you can delete without decreasing the meaning of the phrase. Instead of saying \\u201CYou are offline. Check your internet connection.\\u201D, you might say \\u201CNo internet\\u201D.\")), mdx(\"h3\", null, \"3) Be consistent\"), mdx(\"p\", null, \"UX text is meant to assist, not confuse. Think about your readers. They shouldn\\u2019t be forced to think too much to understand a text. The navigation and other components of an application or website should be consistent. Not just consistent design (colors, layout, etc) but consistent text. Consistency is harder to achieve when there are many people working on an application (like in open source software) or many pages. To maintain textual consistency:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make a list of all key terms, define them and ensure they are used consistently in all pages of the app. For open source projects, keep this list in publicly accessible to contributors. \", \"[Here\\u2019s a template you can use]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Document colors and fonts that should be used \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Don\\u2019t try to hard to be unique that you make the user think. It might be better to give readers a familiar experience. Instead of writing \\u201CReach out / Let\\u2019s talk\\u201D, you could stick with \\u201CContact Us\\u201D, since it\\u2019s widely used and the users immediately understand what you mean. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Don\\u2019t use many synonyms throughout the app/site to express the same concept. For instance, If you decide to use \\u201CSupport\\u201D, stick with it. Don\\u2019t use similar words like \\u201CContact Us\\u201D, \\u201CReach out\\u201D, \\u201CGet Help\\u201D to refer to the same concept. Don\\u2019t say \\u201CLog in: Please enter your password and email to sign in\\u201D, say \\u201CLog in: Please enter your password and email to log in\\u201D. \")), mdx(\"h3\", null, \"4) Be helpful\"), mdx(\"p\", null, \"Consider your readers when writing text on application and web sites. If you\\u2019re trying to guide people, do it properly. The navigation and other components should be smooth and self-explantory. \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Think about the possible issues or points of confusion your users will encounter, then try to guide them through it using text. You can discover user issues by doing user research. It can be as simple as reading open issues (for open source projects), checking frequently asked questions on chat/support channels like Reddit, Stack Overflow, IRC, Discourse or just casually talking to users about their pain points. Make sure your writing answers the frequently asked questions. If there\\u2019s a feature that people are regularly asking how to use, this is an indication that you need clearer instructions. Know when instructions are neccessary, and when they are, be as succint as possible. Use simple, well-structured sentences that are straight to the point and accurate. Don\\u2019t force long instructions into an interface with limited space. Rather, link to instructions/FAQs or use tooltips.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Instead of saying \\u201CNo internet connection: Ok\\u201D, say \\u201CNo internet connection: Retry\\u201D \")), mdx(\"h3\", null, \"5) Write naturally\"), mdx(\"p\", null, \"The reader might not know a lot about a topic or domain as much as you do. It\\u2019s up to you to educate them, irrespective of their background and skills. \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Don\\u2019t use too many big or uncommon words. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If you must use technical words, define them in case the reader doesn\\u2019t know what they mean\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid abbreviations, except common ones (e.g USB). If you must use uncommon abbreviations, make sure they have been defined earlier. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do keyword research. Tools like Ubersuggest, Keyword tool and Google trends are good for finding words that people usually use when searching for something online. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Set a tone, depending on your audience. Your choice of words may be casual or technical/professional. What voice/tone are you trying to convey?\\n\", \"[Example with abbreviation]\")), mdx(\"h3\", null, \"6) Be human\"), mdx(\"p\", null, \"It\\u2019s difficult to express human emotion via text, but it\\u2019s worth a try. You have to make the reader feel like you care about them. The words you write on an interface is your way to talking to your users. Try to make yourself sound less mechanical and more warm. Granted, it is not easy to talk naturally over written text. Speaking is easier and informal. Writing is more structured. Try to infuse some human warmth into your text:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Instead of saying \\u201CThe contact form has been sent. Expect a response shortly\\u201D, say \\u201CWe have received your message. We\\u2019ll get back to you soon\\u201D.\\nActing human doesn\\u2019t mean you should be sympathetic. People from different cultures may be sensitive to be particular topic. You don\\u2019t have to be too clever or hilarious either, as this may distract from the core meaning of your text or distract the user from a task/action. All in all, it depends on your brand, tone/voice and target audience. \")), mdx(\"h3\", null, \"7) Be structured\"), mdx(\"p\", null, \"Good information architechture is important. When the content of a site or page is well structured, it\\u2019s easier for the user to find what they need. If you\\u2019re not careful, you risk having disorganized content, which is hard to find and understand. Consider the needs of your readers when designing content. \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make a list of your objectives. Know why you\\u2019re writing, who you\\u2019re writing for and the impact your text should have. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Start with the most important content at the top of the page, and less important text below. The stuff below should still be important, but not as important as that at the top of the page. Anything which is not helpful should be removed. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use elements like titles, subtitles, lists to organise content into sections\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To attract the reader\\u2019s attention, Use keywords in headings\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Layout content such that text that are related logically are next to each other visually\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Split long text into digestible bits. Even better, slowly reveal the content to avoid overwhelming the reader. \")), mdx(\"h3\", null, \"8) Be focused\"), mdx(\"p\", null, \"Yes, you have so much to say. But writing too much text may not help as much as you expect it too. There\\u2019s no guarantee everything you write will be read. Don\\u2019t try too hard to say too much, you end up saying nothing. Look at your content and ask yourself if every piece of text is neccessary. if something is important, you can compel the reader to pay attention to it by surrounding it with blank space. It\\u2019s easier to focus on something when there is more space around it. For example, a button with space around it will catch the user\\u2019s attention. Whenever you have a call to action, highlight it with whitespace. Gaps around content improves readability. \"), mdx(\"h3\", null, \"9) Be inclusive and accessible\"), mdx(\"p\", null, \"Needless to say, assessibility is important. You should aim to build products that can be used by all. \"), mdx(\"p\", null, \"Accessibile language is language that can be easily read and understood by everyone. The reader may have a disability such as, learning difficulties, poor eye sight, color blindness, poor motor skills (that impede their ability move the mouse of use the keyboard) or have other limitations. Put yourself in their shoes. \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use simple words; avoid technicalities\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Provide concise, direct instructions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use text on links to explain what happens after clicking\")), mdx(\"p\", null, \"Inclusive language is language that is appropriate for all groups of people. Your readers come from different cultures. Don\\u2019t use phrases or expressions that are sensitive to certain groups of people. Be respectful of others beliefs, and be careful not to negatively influence them with your choice of words. For example, \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"words like \\u201Cretarded\\u201D are considered offensive nowadays.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid vague and unclear groupings, for example \\u201CAfricans\\u201D. Here, it is not clear who exactly qualifies as an African. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Unless necessary, don\\u2019t specify gender. Avoid gendered words like salesman (use salesperson). Instead of saying \\u201Cwife\\u201D or \\u201Chusband\\u201D, you may say \\u201Cspouse\\u201D or \\u201Cpartner\\u201D. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid sterotypes\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"cbb232ef-159f-54a5-89dd-a614716d81c5","fields":{"slug":"/blog/how-internet-is-networked/"},"frontmatter":{"title":"How the internet is networked"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How the internet is networked\",\n  \"date\": \"2021-11-11\",\n  \"categories\": [\"internet\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The Internet is the global system of interconnected computer networks that can communicate with one another. The internet is made of made up of many nodes (or centers) that are connected directly or indirectly. \"), mdx(\"h3\", null, \"Nodes\"), mdx(\"p\", null, \"Devices on the internet communicate with one another using nodes. A node is a device on a network that can send or recieve information. For example, your phone, computer and the server hosting this website are nodes. Every node on a network has has address, which is used to identify the nodes. On the internet, this network address is called the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"IP Address\"), \". Nodes can communicate with other nodes on the same network using the address of the destination node. For information to reach the right destination node, it often has to pass through intermediate nodes. \"), mdx(\"h3\", null, \"Routers\"), mdx(\"p\", null, \"We can use routers to connect different networks. A \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"router\"), \" is a device that directs information from one network to another. This information is in the form of IP packets, pieces of data that form internet traffic. \"), mdx(\"h3\", null, \"Servers and Clients\"), mdx(\"p\", null, \"A server is a node that provides services over a network. Servers can accept connections from other nodes, and can transmit, receive and process information. Examples of server nodes are email services and website hosts.\"), mdx(\"p\", null, \"A client is a node that uses a service. Examples of clients are user devices like phones, or client applications.\"), mdx(\"p\", null, \"For you to view this web page, your browser had to fetch it from a server. When you read an email, you use a client application (e.g Gmail) to connect with the email server.  \"), mdx(\"h3\", null, \"Types of networks\"), mdx(\"p\", null, \"communicate between networks and devices.\\nNetworks can be classified according to their shapes when mapped out:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Centralized network\"), \": A centralized network is one where many clients are connected through a single router. It is shaped like a star with a central node. An example of a centralized network is a game server that has many player devices connected to it. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Decentralized network\"), \": A decentralized network is one that has many clients connected to several routers that are connected to each other. It is shaped like a constellation of many stars. An example of a decentralized network is an email delivery server. Generally, the internet is structured as a decentralized network. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Distributed network\"), \": It is possible for clients to also act as servers. A distributed network is a network where all nodes are connected to each other, with each node acting as both a client and server. In a fully distributed network, all nodes can communicate directed with each other without any central servers. \")), mdx(\"p\", null, \"Today, a lot of internet services are centralized by big companies. Two disadvantages of this is that the privacy of the internet user is reduced and a single point of failure can result to failures across all dependent websites. Many people hope we can have a decentralized internet someday\"), mdx(\"h3\", null, \"Hardware Addresses\"), mdx(\"p\", null, \"For devices like computers and phones to connect to a network, they need a network card. In addition to connecting a device to a network, the network card provides the hardware address, which is used to identify the device on a network. \"), mdx(\"p\", null, \"The network card of a device on the internet has a MAC (Media Access Control) address (or device ID). This is a unique address a device uses to communicate with other devices, such as a router. The MAC address is only used by local networks, mainly to identify a device, e.g a router uses the address to identify the device connected to it. \"), mdx(\"p\", null, \"The MAC Address of a device can be used to monitor the movement of people in an area. For this reason, some operating systems randomize the MAC address to make is harder to link hardware addresses to real-world devices. \"), mdx(\"h3\", null, \"How a device joins a network (internet)\"), mdx(\"p\", null, \"To connect adevice to the internet, you can use an Ethernet cable, Wi-FI (via a router), mobile network or satellite network. Once connected, your device\\u2019s network card is then given a network address and becomes part of the network. Your device can now send and receive information from other nodes in the network. \"));\n}\n;\nMDXContent.isMDXComponent = true;"}}},
    "staticQueryHashes": ["3128451518"]}