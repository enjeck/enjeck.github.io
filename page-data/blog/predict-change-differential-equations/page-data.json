{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blog/predict-change-differential-equations/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Enjeck's Personal Website","author":"Enjeck Cleopatra"}},"mdx":{"id":"e1b144a9-ca1f-5b3c-9c8b-c7c976ea91dc","excerpt":"Inspired by my own challenges with weight fluctuations, I wanted to explore how weight changes depending on calorie consumption. I recently learned aboutâ€¦","frontmatter":{"title":"Predictive modeling of weight changes using differential equations","date":"November 08, 2021"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Predictive modeling of weight changes using differential equations\",\n  \"date\": \"2021-11-08\",\n  \"categories\": [\"math\", \"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Inspired by my own challenges with weight fluctuations, I wanted to explore how weight changes depending on calorie consumption. I recently learned about differential equations in one of my math classes, and this seemed like a great way to apply the knowledge learned. \"), mdx(\"p\", null, \"Try out the final product \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"\"\n  }, \"here\"), \".\"), mdx(\"p\", null, \"View the code on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"\"\n  }, \"GitHub\"), \".\"), mdx(\"h2\", null, \"The mathematical model\"), mdx(\"p\", null, \"Differential equations have many applications in the real world.\\nThey are especially useful whenever you want to model how a system changes with respect to something, usually time. It can be a mechanical system like a pendulum, a dynamic system like the interaction of planets in space, an economic system like population decline/explosion, or even a biological system like human weight changes. The idea was to apply differential equations to build a model for predicting weight change based on calories, and then build a web application around this model, so users can enter their information and see how their weight might change per month over time. This data will be visualized using a table and a line graph. \"), mdx(\"p\", null, \"Initially, I considered basing my model on energy expenditure per kilogram. The daily rate of energy expenditure is between 35 and 45 calories per kg per day, depending on the person\\u2019s sex, age, activity level, and other factors. I didn\\u2019t know how to adjust this daily energy expenditure to reflect these factors. For simplicity, I could have just assumed that a person\\u2019s daily average energy expenditure is the mean of 35 and 45, which is 40 calories per kg per day. Rather than make this assumption, I decided to use the basal metabolic rate. \"), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Basal_metabolic_rate\"\n  }, \"basal metabolic rate (BMR\"), \" is the rate of energy expenditure per unit time by endothermic animals at rest. The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Basal_metabolic_rate#BMR_estimation_formulas\"\n  }, \"Mifflin St Jeor equation\"), \" is considered one of the most accurate formula to calculate BMR:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"P = \\\\left({10.0m \\\\over 1kg} + {6.25h\\\\over 1cm} - {5.0a\\\\over 1year} + s \\\\right) \\\\frac{kcal}{day}\"), mdx(\"p\", null, \"where,\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"m\"), \" = body mass in kg\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"h\"), \" = height in cm\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"a\"), \" = age in years\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"s\"), \" = +5 for men and -161 for women\")), mdx(\"p\", null, \"For example, a 25-year-old woman weighing 80kg and 170cm tall would have a BMR of 1576.5 kcal per day. This value is the number of calories her body spends at complete rest. Performing activities like going to work, doing house chores, or exercising do increase the total daily expenditure. Since a normal person doesn\\u2019t spend all day at rest, we can scale the BMR, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"P\"), \", by an \\u201Cactivity factor\\u201D which depends on daily activities. The value of this activity factor varies based on activity: \"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Level of Activity\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Activity factor\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Bed rest (Bedridden - Unconscious)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.0-1.1\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Sedentary (Little to no exercise )\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.2\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Light exercise (1-3 days per week)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.3\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Moderate exercise (3-5 days per week)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.5\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Heavy exercise (6-7 days per week)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.7\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Very heavy exercise (twice per day, extra heavy workouts)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.9\")))), mdx(\"p\", null, \"Including this activity factor, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"f\"), \", into the BMR formula, we get our estimated total daily energy expenditure, which we shall call \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"T\"), \",\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"T = f (10m + 6.25h - 5a + s)\"), mdx(\"p\", null, \"According to the activity factor chart, if the woman in the aforementioned example does light exercise, her total daily energy expenditure is 1.3*1576.5 \\u2248 2050. What does this mean in terms of weight change? It means in order to lose weight, the woman must consume less than 2050 calories daily. Consuming more than 2050 calories will result in weight gain. \"), mdx(\"p\", null, \"No matter the approach taken to create a model for weight change, we shall end up using the first law of thermodynamics to create an equation expressed in terms of exponential decay. \"), mdx(\"p\", null, \"The fact that the equation will have an exponential term (that is, using Euler\\u2019s number, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"e\"), \") makes sense, when you come to think of it. For example, suppose the woman in the example above wants to lose weight. It is estimated that 7700 calories equal one kilogram. If the woman reduces her daily calorie intake to 1500 calories, this produces a deficit of 550 calories. Assuming she follows the diet strictly, in 2 weeks (14 days), this woman should accrue a total calorie deficit of 7700, which equates to 1 kilogram lost. Therefore, she should lose 2kg in 4 weeks, 3kgs in 6 weeks, 6kgs in 8 weeks, right? Wrong! The rate of weight change is not constant, because as she loses weight, her BMR changes, which means she must adjust her calorie intake. For this reason, the weight change equation will have an exponential decay term based on time, which governs how weight loss slows down as weight is lost and BMR changes. \"), mdx(\"p\", null, \"The first law of thermodynamics states that: \"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Change\\\\ in\\\\ energy = heat\\\\ added - work\\\\ done\\\\ by\\\\ the\\\\ system\"), mdx(\"p\", null, \"Relating this law to weight change, we have: \"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Change\\\\ in\\\\ weight = calories\\\\ in - calories\\\\ out\"), mdx(\"p\", null, \"Let variable \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"n\"), \" represent the daily calories intake. Calories out is given by the total daily energy expenditure (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"T\"), \") value already calculated earlier:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Net\\\\ daily\\\\ calorie\\\\ surplus/deficit = n - T\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Net\\\\ daily\\\\ calorie\\\\ surplus/deficit = n - f (10m + 6.25h - 5a + s)\"), mdx(\"p\", null, \"Instead of using the variable \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"m\"), \", let\\u2019s replace it with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"w(t)\"), \", which represents the weight after time \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"t\"), \" (in days): \"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Net\\\\ daily\\\\ calorie\\\\ surplus/deficit = n - f (10w(t) + 6.25h - 5a + s)\"), mdx(\"p\", null, \"If we estimate one kilogram to be 7700 calories, then dividing the equation by 7700 gives the weight change:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"weight\\\\ change = \\\\frac{n - f (10w(t) + 6.25h - 5a + s)}{7700}\"), mdx(\"p\", null, \"This change in weight is approximately the derivative of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"w(t)\"), \":\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{dw(t)}{dt} = \\\\frac{n - f (10w(t) + 6.25h - 5a + s)}{7700}\"), mdx(\"p\", null, \"This is a first order ordinary differential equation. We can solve for \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"w(t)\"), \" using the separation method. At first glance, the equation may not look separable, but it is. \"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{dw(t)}{dt} = \\\\frac{n -10fw(t) - f(6.25h - 5a + s)}{7700}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{dw(t)}{dt} = \\\\frac{-10fw(t)}{7700} + \\\\frac{n - f(6.25h - 5a + s)}{7700}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{dw(t)}{dt} = \\\\frac{-fw(t)}{770} + \\\\frac{n - f(6.25h - 5a + s)}{7700}\"), mdx(\"p\", null, \"The differential equation has only two main variables \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"w(t)\"), \" (dependent variable) and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"t\"), \" (independent variable)  because the derivative term says \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, \"\\\\frac{dw(t)}{dt}\"), \". So, the other variables (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"f\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"h\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"a\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"s\"), \") can be temporarily treated as constants so as to make simplification easier:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Let\\\\ k = \\\\frac{n - f(6.25h - 5a + s)}{7700}\"), mdx(\"p\", null, \"Thus, \"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{dw(t)}{dt} = \\\\frac{-fw(t)}{770} + k\"), mdx(\"p\", null, \"To separate, we multiply through by \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"dt\"), \" and divide by \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, \"\\\\frac{-fw(t)}{770} + k\")), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{dw(t)}{{-fw(t)\\\\over 770} + k} = dt\"), mdx(\"p\", null, \"Now, we proceed as we normally would when solving separable ordinary differential equations, by integrating:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\int\\\\frac{dw(t)}{{-fw(t)\\\\over 770} + k} = \\\\int{dt}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\int\\\\frac{1}{{-fw(t)\\\\over 770} + k}dw(t) = \\\\int{dt}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"{1 \\\\over {-f\\\\over 770}} \\\\log \\\\left|{{-fw(t)\\\\over 770} + k}\\\\right| = t + c_{1}\"), mdx(\"p\", null, \"where \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, \"c_1\"), \" is the constant of integration.\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\log \\\\left|{{-fw(t)\\\\over 770} + k}\\\\right| = {-f\\\\over 770} (t + c_{1})\"), mdx(\"p\", null, \"Putting everything in base \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"e\"), \", the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"log\"), \" cancels out and we get:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{-fw(t)}{770} + k = \\\\pm e^{\\\\frac{-f}{770} (t + c_1)}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{-fw(t)}{770} + k = \\\\pm c_1 e^{\\\\frac{-ft}{770}}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{-fw(t)}{770} = \\\\pm c_1 e^{\\\\frac{-ft}{770}} - k\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"-fw(t) = 770(\\\\pm c_1 e^{\\\\frac{-ft}{770}} - k)\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"fw(t) = \\\\pm770 c_1 e^{\\\\frac{-ft}{770}} + 770 k\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Let\\\\ c_2 = \\\\pm770 c_1\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"fw(t) = c_2e^{\\\\frac{-ft}{770}} + 770 k\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(t) = \\\\frac{c_2e^{\\\\frac{-ft}{770}} + 770 k} {f}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(t) = \\\\frac{c_2e^{\\\\frac{-ft}{770}}}{f} + \\\\frac{770 k} {f}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Let\\\\ c = \\\\frac{c_2}{f}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(t) = ce^{\\\\frac{-ft}{770}} + \\\\frac{770 k} {f}\"), mdx(\"p\", null, \"Replacing \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"k\"), \" with its original expression, we get:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(t) = ce^{\\\\frac{-ft}{770}} + \\\\frac{770}{f} \\\\left(\\\\frac{n - f(6.25h - 5a + s)}{7700} \\\\right)\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(t) = ce^{\\\\frac{-ft}{770}} + \\\\frac{n - f(6.25h - 5a + s)}{10f} \"), mdx(\"p\", null, \"We can now solve for the constant \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"c\"), \". For any person, at the starting weight, t = 0 (that is, at day 0). Substituting t=0 in the equation,  we get: \"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(0) = ce^{0} + \\\\frac{n - f(6.25h - 5a + s)}{10f} \"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(0) = c + \\\\frac{n - f(6.25h - 5a + s)}{10f} \"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"c = w(0) - \\\\frac{n - f(6.25h - 5a + s)}{10f} \"), mdx(\"p\", null, \"For any person, given a starting weight \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"w(0)\"), \", number of calories eaten per day \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"n\"), \", activity factor \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"f\"), \", height \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"h\"), \", age \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"a\"), \" and sex \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"s\"), \", we can calculate the constant \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"c\"), \". The value of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"c\"), \" will then be substituted back into the equation, and can be used to calculate the weight after any amount of time, e.g after 1 year (here, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"t\"), \" = 365 days)\"), mdx(\"p\", null, \"Let\\u2019s consider the example woman again. She is 25 years old, initially weighs, 170cm in height and eats 1500 calories daily. \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"f = 1.3\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"h = 170cm\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"s = -161\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"w(0) = 80kg\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a = 25\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"n = 1500\")), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"c = 80 - \\\\frac{1500 - 1.3(6.25(170) - 5(25) -161)}{10(1.3)} \"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"c = 80 - 37.7\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"c = 42.3\"), mdx(\"p\", null, \"Fitting \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"c = 42.3\"), \" into the original equation, we have the following solution for this woman:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(t) = 42.3e^{\\\\frac{-ft}{770}} + \\\\frac{n - f(6.25h - 5a + s)}{10f} \"), mdx(\"p\", null, \"The value of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"c\"), \" varies from person to person, since it is based on personal information like age, height, activity, sex and calorie intake. \"), mdx(\"p\", null, \"For this particular woman, we can now find out her weight after 1 year:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(365) = 42.3e^{\\\\frac{-(1.3)(365)}{770}} + \\\\frac{1500 - 1.3(6.25(170) - 5(25) - 161)}{10(1.3)} \"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(365) = 22.8 + 37.7\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(365) = 60.5\"), mdx(\"p\", null, \"So, after 1 year, this woman\\u2019s weight has dropped from 80kg to 60.5kg. Losing 19.5kg over a year is a pretty realistic prediction. After 2 years, her weight should be 50kg, a difference of 10kg from the first year\\u2019s loss. As you can see, as she loses weight over time, the rate of weight loss slows down. This is how it goes in real life. \"), mdx(\"h2\", null, \"The code\"), mdx(\"p\", null, \"The hard part is done. Now, we can translate the mathematical model into code. Using HTML, CSS and JavaScript, we can build a web app that accepts age, height, current weight, sex and diet as input and then shows a month-by-month prediction (in the form of a table of value and line chart) of how their weight might change over 8 years. Assuming they stick to the diet, of course.\"), mdx(\"h4\", null, \"HTML\"), mdx(\"p\", null, \"For the most part, the HTML code is a series of input fields and an output area. In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<head>\"), \" of the file, there\\u2019s a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" adding the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://d3js.org/\"\n  }, \"D3.js library\"), \", that will be used to draw the line chart. All input fields are marked as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"required\"), \" to ensure that the user fills them out. The age, height, current weight and calories fields are given \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type=number\"), \" to prevent invalid non-numeric entries. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"utf-8\\\" />\\n    <meta http-equiv=\\\"x-ua-compatible\\\" content=\\\"ie=edge\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width\\\" />\\n    <title>Weight change prediction</title>\\n    <link href=\\\"styles.css\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\" />  \\n    <!-- D3 library used to draw line graph -->\\n    <script src=\\\"https://cdn.jsdelivr.net/npm/d3@7\\\"></script>\\n    <script src=\\\"script.js\\\"></script>\\n  </head>\\n<body>\\n  <div id=\\\"main\\\">\\n    <div class=\\\"intro\\\">\\n    <h1>Weight change prediction</h1>\\n    <p> If you eat X number of calories a day, will you gain or lose weight? \\n      And how does this weight change look like over time? Let's find out! </p>\\n    </div>\\n    <form id=\\\"form\\\">\\n      <!-- Series of input fields -->\\n      <label for=\\\"age\\\">Enter your age (in years): </label>\\n      <br />\\n      <input placeholder=\\\"e.g 25\\\" type=\\\"number\\\" id=\\\"age\\\" required />\\n      <br />\\n      <label for=\\\"weight\\\">Enter your current weight (in kg): </label>\\n      <br />\\n      <input\\n        type=\\\"number\\\"\\n        id=\\\"weight\\\"\\n        required\\n      />\\n      <br />\\n      <label for=\\\"height\\\">Enter your height (in cm): </label>\\n      <br />\\n      <input\\n        type=\\\"number\\\"\\n        id=\\\"height\\\"\\n        required\\n      />\\n      <br />\\n      <label for=\\\"diet\\\">How many calories will you eat daily?: </label>\\n      <br />\\n      <input\\n        type=\\\"number\\\"\\n        id=\\\"diet\\\"\\n        required\\n      />\\n      <br />\\n      <div>\\n        <p>Enter your sex:</p>\\n        <input type=\\\"radio\\\" id=\\\"sexChoice1\\\" name=\\\"sex\\\" value=\\\"male\\\" required />\\n        <label for=\\\"sexChoice1\\\">Male</label>\\n\\n        <input\\n          type=\\\"radio\\\"\\n          id=\\\"sexChoice2\\\"\\n          name=\\\"sex\\\"\\n          value=\\\"female\\\"\\n          required\\n        />\\n        <label for=\\\"sexChoice2\\\">Female</label>\\n      </div>\\n      <label for=\\\"activity\\\">How many calories will you eat daily?: </label>\\n      <br />\\n      <select name=\\\"activity\\\" id=\\\"activity\\\" required>\\n        <option value=\\\"sedentary\\\">Sedentary (Little to no exercise )</option>\\n        <option value=\\\"light-exercise\\\">\\n          Light exercise (1-3 days per week)\\n        </option>\\n        <option value=\\\"moderate-exercise\\\">\\n          Moderate exercise (3-5 days per week)\\n        </option>\\n        <option value=\\\"heavy-exercise\\\">\\n          Heavy exercise (6-7 days per week)\\n        </option>\\n        <option value=\\\"v-heavy-exercise\\\">\\n          Very heavy exercise (twice per day, extra heavy workouts)\\n        </option>\\n      </select>\\n      <br />\\n      <!-- Submit button -->\\n      <input type=\\\"submit\\\" value=\\\"Predict\\\" id=\\\"predict-btn\\\" />\\n    </form>\\n    <div id =\\\"output\\\">\\n      <h2 class=\\\"output-text\\\"> Predictions over 100 months (~8 years)</h2>\\n\\n      <!-- Output area for the line chart-->\\n      <h3 class=\\\"output-text\\\"> Line chart</h3>\\n    <div id=\\\"line-chart\\\">\\n    </div>\\n\\n    <!-- Output area for the table of chart-->\\n    <h3 class=\\\"output-text\\\"> Table of values</h3>\\n    <div id=\\\"table\\\"></div>\\n  </div>\\n  </div>\\n  \\n</body>\\n</html>\\n\")), mdx(\"h4\", null, \"CSS\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \".top-menu {\\n    padding: 20px 5%;\\n    display: flex;\\n    justify-content: flex-end;\\n}\\n\\n.top-menu a {\\n    font-weight: bold;\\n}\\n\\n#main {\\n    max-width: 1000px;\\n    margin: auto;\\n    padding: 10px;\\n    font-family:'Courier New', Courier, monospace;\\n    scroll-behavior: smooth;\\n}\\n\\n\\n.intro h1 {\\n    text-align: center;\\n    font-weight: bold;\\n    color:blueviolet;\\n    text-shadow: 1px 1px 1px black;\\n    text-transform: uppercase;\\n}\\n\\n.intro p {\\n    font-size: 20px;\\n    margin-bottom: 40px;\\n}\\n\\n#form {\\n    padding: 20px;\\n    background: #eee;\\n}\\n\\n#form input, select {\\n    padding: 5px;\\n    font-size: 16px;\\n    margin-bottom: 20px;\\n}\\n\\n#form label {\\n    line-height: 30px;\\n}\\n\\n#form #predict-btn {\\n    outline: non;\\n    border: 0;\\n    background:blueviolet;\\n    padding: 10px 40px;\\n    margin-top: 20px;\\n    color: #fff;\\n    text-transform: uppercase;\\n    cursor: pointer;\\n    font-weight: bold;\\n}\\n\\n#output, #line-chart {\\n    width: 100%;\\n    height: auto;\\n    margin: auto;\\n}\\n\\n#line-chart{\\n    display: flex;\\n    justify-content: center;\\n    margin-bottom: 40px;\\n}\\n\\nh2.output-text {\\n    color:blueviolet;\\n    text-decoration: none;\\n}\\n\\n.output-text {\\n    margin-top: 50px;\\n    text-align: center;\\n    text-decoration: underline;\\n    /* Hide the output area text by default*/\\n    display: none;\\n}\\n\\ntable {\\n    font-family: arial, sans-serif;\\n    border-collapse: collapse;\\n    max-width: 1000px;\\n    margin: auto;\\n    margin-bottom: 40px;\\n  }\\n\\n  td,\\n  th {\\n    border: 1px solid #dddddd;\\n    text-align: left;\\n    padding: 8px;\\n    width: 25%;\\n  }\\n  .red {\\n    color: red;\\n  }\\n  .green {\\n    color: green;\\n  }\\n\")), mdx(\"h4\", null, \"JavaScript\"), mdx(\"h3\", null, \"References\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://en.wikipedia.org/wiki/Basal_metabolic_rate\"\n  }, \"https://en.wikipedia.org/wiki/Basal_metabolic_rate\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://clinmedjournals.org/articles/jnmdc/jnmdc-2-016table1.html\"\n  }, \"https://clinmedjournals.org/articles/jnmdc/jnmdc-2-016table1.html\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.researchgate.net/publication/256293379_A_Mathematical_Diet_Model\"\n  }, \"https://www.researchgate.net/publication/256293379_A_Mathematical_Diet_Model\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3975626/\"\n  }, \"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3975626/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://jeffq.com/blog/modeling-weight-loss-with-differential-equations/\"\n  }, \"http://jeffq.com/blog/modeling-weight-loss-with-differential-equations/\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/blog/predict-change-differential-equations/","previous":{"id":"3840f9e2-4d44-5fc5-b1c9-4e64aa38417d","fields":{"slug":"/blog/distance-two-locations/"},"frontmatter":{"title":"How to calculate the distance between two locations using JavaScript"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to calculate the distance between two locations using JavaScript\",\n  \"date\": \"2021-09-25\",\n  \"categories\": [\"html\", \"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The most popular way of calculating the distance between two points on a\\nsphere is using the Haversine equation.\\nIf you have the coordinates (that is; longitude and latitude) of the the starting and\\ndestination locations, you can use this equation to calculate it.\\nHere\\u2019s how to do calculate the distance in kilometers between two locations using\\nJavaScript and the geolocation API. \"), mdx(\"p\", null, \"By default, coordinates (gotten using the Geolocation API) are given in degrees.\\nWe need them in radians for the formula. Here\\u2019s our conversion function: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Convert from degrees to radians\\nfunction degreesToRadians(degrees) {\\n  var radians = (degrees * Math.PI)/180;\\n  return radians;\\n}\\n\")), mdx(\"p\", null, \"Here\\u2019s the function that does the distance calculation using coordinates (longitudes and latitudes).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Function takes two objects, that contain coordinates to a starting and destination location.\\nfunction calcDistance (startingCoords, destinationCoords){\\n  let startingLat = degreesToRadians(startCoords.latitude);\\n  let startingLong = degreesToRadians(startCoords.longitude);\\n  let destinationLat = degreesToRadians(destCoords.latitude);\\n  let destinationLong = degreesToRadians(destCoords.longitude);\\n\\n  // Radius of the Earth in kilometers\\n  let radius = 6571;\\n\\n  // Haversine equation\\n  let distanceInKilometers = Math.acos(Math.sin(startingLat) * Math.sin(destinationLat) +\\n  Math.cos(startingLat) * Math.cos(destinationLat) *\\n  Math.cos(startingLong - destinationLong)) * radius;\\n}\\n  return distanceInKilometers;\\n}\\n\")), mdx(\"p\", null, \"Now, you can the call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"calcDistance\"), \" function and pass it any two coordinates.\\nFor example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let sCoords = {\\nlatitude: 58.39343;\\nlongitude: -259.2627;\\n}\\n\\nlet dCoords = {\\nlatitude: 43.8394;\\nlongitude: -129.3984;\\n}\\nlet dist = calcDistance(sCoords, dCoords)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"599e291b-8fde-5971-a7e0-8b744cd53c4a","fields":{"slug":"/blog/web-request-service/"},"frontmatter":{"title":"XMLHttpRequest vs JSONP (vs fetch API?) to make requests to web services using JavaScript"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"XMLHttpRequest vs JSONP (vs fetch API?) to make requests to web services using JavaScript\",\n  \"date\": \"2021-11-11\",\n  \"categories\": [\"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When a browser requests a page from a web server, it makes an HTTP request to the server. The browser then receives the page returned by the server, along with other metadata. In a similar way, the browser can also retrieve data with HTTP from a web server, rather than requesting it. \"), mdx(\"p\", null, \"We can request for a resource from a server using Ajax or XHR. When making the request, we send metadata such as host (the website we\\u2019re making the request to) and user-agent (the browser the request is coming from). Based on the request, the browser receives a response from the server as well as a response code and metadata (such as content-length and content type).\"), mdx(\"p\", null, \"To make a request from JavaScript program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"First, start with a URL that tells the browser where to get the data from. \")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const url = \\\"http://exampleserver.com/data.json\\\"\\n\")), mdx(\"p\", null, \"In the url above, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".json\"), \" at the end represents the JSON format, a popular format for exchanging data. \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Secondly, create a request object:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let request = new XMLHttpRequest();\\n\")), mdx(\"p\", null, \"The XMLHttpRequest (XHR) constructor is used to create a brand new request object. \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"With the request object created, we need to tell it which url and kind of request it should use. There are several kinds of requests, most popular are GET (to retrieve data) and POST (to send data). The open method is used to specify the type of request, Below, it sets up a request using an HTTP GET. \")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"request.open(\\\"GET\\\", url);\\n\")), mdx(\"p\", null, \"Now, how do you know when the data arrives (or if it arrives)? It can take as little as as a few seconds or as long as several minutes to receive a response. To know when the data arrives, we need to have a function that is called upon data arrival. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"request.onload = function() {\\n  if (request.status == 200) {\\n  alert(request.responseText);\\n  }\\n};\\n\")), mdx(\"p\", null, \"This handler function can do whatever you want. In the above example, the function throws an alert containing the response text if the request was successful. The expression \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"request.onload\"), \" ensures that the handler function is called when the browser gets an answer from the server. It checks if we got the request status is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"200\"), \" (the code for a successful request). If true, we can then can do something with the data, or in this case, just show an alert. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"responseText\"), \" property gets the response of the request object. \"), mdx(\"p\", null, \"If you run the code so far, nothing happens. This is because we have not sent the request yet. To do this, we make use of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"send()\"), \" method: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"request.send(null);\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"send()\"), \" method takes null as a parameter if we are not sending any data to the server.\"), mdx(\"h2\", null, \"Understanding Browser Security Policy\"), mdx(\"p\", null, \"You may have come across this issue at some point. You\\u2019ve written some code that retrieves data from a local server, and it works. But when you moved from a local to live server on the web, the code doesn\\u2019t work anymore. What exactly is going on? If you have the correct URL, then problem might be a browser security issue. \"), mdx(\"p\", null, \"For good reasons, browsers enforce some security rules around XMLHttpRequest HTTP requests. Browser security policy says that you can only retrieve data from the same domain the page was served from. That is, you can\\u2019t retrieve data from a domain different from the one the page uses. \"), mdx(\"p\", null, \"For example, if you\\u2019re running a page on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"example.com\"), \", you can\\u2019t make HTTP requests to a page on another domain, such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"anotherexample.com\"), \". This behavior might be annoying, but it\\u2019s for good reason. Say a hacker inserts a malicious script into your system that can read personal user information. Browser security policy prevents this hacker from relaying this information or comunicating with another server outside the original domain the page was served from. \"), mdx(\"p\", null, \"What\\u2019s allowed:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A user makes a request (via the browser) for data from the original domain the page was served from. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If a page on \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"example.com\"), \" needs some data from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"example.com\"), \", it can make a XMLHttpRequest for the required data.\")), mdx(\"p\", null, \"Not allowed:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A piece of code on \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"example.com\"), \" wants data from another domain, e.g \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"anotherexample.com\"), \". As soon as the browser realises the request is to a different domain than the page, it stops the request and the request never reaches \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"anotherexample.com\"), \"\\u2019s server. This is the Browser Security Policy in action \\u2014 it stops cross-origin requests. \")), mdx(\"p\", null, \"So, what if you really need to make a request to a domain different from the original one? XMLHttpRequest is good for where the data is stored at the same domain as the app. To retrieve data from a third party, say Facebook or Twitter, we can resort to JSONP (JSON with padding). \"), mdx(\"h2\", null, \"Understanding JSONP\"), mdx(\"p\", null, \"JSONP (JSON with padding) is a method, based on JSON, of requesting data from a third-party (that is, a domain different from the original domain the page was served from. JSONP works around cross-origin browser security policy by letting us use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" tag to retrieve data, instead of getting data through the typical XMLHttpRequest.\"), mdx(\"p\", null, \"It sounds strange, but it works \\u2014 you can actually use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" tag to get data. Normally, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" element is used to retrieve JavaScript code. But if we put data in this \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" element code, we can make it retrieve data. Fascinating, huh? \"), mdx(\"p\", null, \"But why does this work? Say we have a file named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hello.js\"), \" saved on some random webserver with contents:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"alert(\\\"hello\\\");\\n\")), mdx(\"p\", null, \"What if you want to use this script in your HTML file? You can simply link to it in the script element:\"), mdx(\"script\", {\n    src: \"http://example.com/hello.js\"\n  }, \" \"), mdx(\"p\", null, \"Above, we load the JavaScript from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hello.js\"), \" from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"example.com\"), \", hereby calling the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"alert\"), \" function, and displaying an alert saying \\u201Chello\\u201D on your browser. This example demonstrates how a JavaScript file hosted on another domain can call a function from within your browser. \"), mdx(\"p\", null, \"We can go further. Suppose we have the following code at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://example.com/greet.js\"\n  }, \"http://example.com/greet.js\"), \": \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function greet(name, greeting){\\n  alert(name + \\\" says \\\" + greeting);\\n}\\n\")), mdx(\"p\", null, \"From our local HTML file, we can import this script and call the function, like so:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<script src=\\\"http://randomwebsite.com/greet.js\\\"> \\n    greet(\\\"Mary\\\", \\\"hello\\\")\\n</script>\\n\")), mdx(\"p\", null, \"If you run the above code, you get an alert that says \\u201CMary says hello\\u201D. As you can see, we are able to pass arguments to functions that were defined in an external source. It is therefore possible for a JavaScript file served from another domain to call a function in your code and for you to pass arguments to an external function.\"), mdx(\"p\", null, \"These arguments can be treated like data. It may not look like it in the previous examples, because we are passing in string parameters. Suppose we have a situation were we can add object arguments, like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"greet({\\\"name\\\": \\\"Mary\\\", \\\"greeting\\\": \\\"hello\\\"})\\n\")), mdx(\"p\", null, \"So, if we have a JavaScript file on another server that defines an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"updateContact\"), \" function, we can pass data to that function through the referenced JavaScript file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let contacts = {[\\\"john\\\": \\\"+1-202-555-0179\\\", \\\"jamie\\\": \\\"+44 1632 960332\\\", \\\"paul\\\": \\\"+1-613-555-0125 \\\", \\\"sarah\\\":\\\"+61 1900 654 321\\\"]};\\nupdateContact(contacts);\\n\")), mdx(\"p\", null, \"We need not use XMLHttpRequest. We can retrieve data from another domain, which is not allowed by XMLHttpRequest. This may look like some kind of \\u201Chack\\u201D, and maybe it is, but keep in mind that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" element has always behaved like this. It might just be surprising to learn about its power. \"), mdx(\"p\", null, \"JSONP provides a way to get JSON objects using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" tag approach, as shown above. We can retrieve data in the form of JSON objects, while avoiding cross-origin/cross-domain security issues that will arise with XMLHttpRequest.\"), mdx(\"h3\", null, \"How JSONP works\"), mdx(\"p\", null, \"When we pass object as arguments, it starts to look like data. The code at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://example.com/greet.js\"), \" can be modified to read object arguments rather than strings.\"), mdx(\"p\", null, \"The \\u201CP\\u201D in JSONP stands for padding. This \\u201Cpadding\\u201D just signifies that the requested JSON is padded or wrapped in a function before it comes as a response. When a request is made to a web service, the response has a function prefix (e.g \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"updateContact\"), \"). \"), mdx(\"p\", null, \"1- Our HTML code contains a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" element. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" value of this script is the URL of a web service than can provide JSON data.\\n2- When the browser sees the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" element, it sends an HTTP request to the src URL\\u2019s server.\\n3- Treating the request like any HTTP request, the server sends back JSON in its response. This JSON is a string representation of the object. Before the browser sends back the JSON response, it wraps it in a function call. For example, a call to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"updateContact\"), \" function.\\n4 - The JSON response, wrapped in a function call, is intepreted by the browser. This function is called and passed an argument which is the object generated from the JSON string. Data types are converted into JavaScript object. If there\\u2019s code, it gets executed. \"), mdx(\"p\", null, \"By now, you should understand how the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" tag is used to make the browser retrieve JavaScript and how the server puts its JSON data in this JavaScript. The purpose of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" tag is to retrieve code, but we can \\u201Chack\\u201D it to make it request for data. Hacky, but efficient, since we can use the same \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" tag to retrieve code and data. This all works through functions, so the web service needs to know the correct function name so that it knows what to call. For instance, a call to updateContacts or any other function. \"), mdx(\"p\", null, \"To ensure the user can call the right function, web services allow you to specify a callback function, that is, specify the name of the function that should be called. This is done by adding a parameter to the end of the URL:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://example.com/?callback=functionName\")), mdx(\"p\", null, \"It start like a normal URL. At the end, we add the callback parameter that tells the web service to use the specified function when generating to JavaScript. The web service will use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"functionName\"), \" to wrap (or pad) the JSON data before sending it back to you. Most web services use the callback parameters, but others may use something else. To know what parameters a web service uses and if it supports JSONP, read their documentation. \"), mdx(\"p\", null, \"What if you want to retrieve data over and over? This behavior is necessary for web apps that need to monitor data in real time and update the app. Such repetitive action can be done using a handler that will regularly make the JSONP request, say, after every 5 seconds. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"setInterval(handlerFunction, 5000)\\n\")), mdx(\"p\", null, \"The setInterval method receives a function handler and interval. In the example above, every 5 seconds (5000ms), JavaScript will call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handlerFunction\"), \" function. This handler contains the code that directs JSONP to retrieve the needed data. For example, it can can add a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" element to the DOM. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function handlerFunction() {\\n   const url =  \\\"http://randomwebsite.com/?callback=functionName\\\";\\n   \\n   // Create a new script element\\n   let newScript = document.createElement(\\\"script\\\");\\n   // Give the new element an id so that we can reference it whenever we want to\\n    newScript.setAttribute(\\\"id\\\", \\\"jsonp\\\");\\n    //Give the script element's src atribute a value of the JSONP url\\n   newScript.setAttribute(\\\"src\\\", url);\\n   \\n   // Get the script element with id \\\"jsonp\\\". If this is the first call, it will not exist yet\\n   let oldScript = document.getElementById(\\\"jsonp\\\");\\n   // Get the <head> element, within which we shall insert our new script\\n   let headElement = getElementsByTagName(\\\"head\\\")[0];\\n   \\n   // If the <script> element does not exist in the DOM, we add the script element to the head\\n   if (oldScript == null){\\n    headElement.appendChild(newScript);\\n   }\\n   // If a script element already exists in the head, we replace the old script element with the new script element. \\n   else {\\n    headElement.replaceChild(newScript, oldScript); \\n   }\\n }\\n\")), mdx(\"p\", null, \"The above code creates a new script element, gives it relevant attributes, and adds it to the DOM. Notice that the newly added \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" replaces the old one, instead of just adding to it. By do doing, we can prevent making the DOM noisy with too many \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" elements.  \"), mdx(\"p\", null, \"You may be wondering, instead of continously creating new script elements and replacing it with the old ones, why not just modify the value of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" attribute?  Unfortunately, this won\\u2019t work. You can update the value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" attribute to point to a new URL, but the browser won\\u2019t make a request to retrieve the JSON. A new script must be added to the DOM to force the browser to make the request. This process is called \\u201Cscript injection\\u201D. \"), mdx(\"h4\", null, \"Browser cache\"), mdx(\"p\", null, \"Browsers are trying to be efficient. When you retrieve data from the same URL (e.g a JSONP request) over and over again, the browser will cache (store away future use) the response. At some point, you won\\u2019t be getting new data anymore, instead you will receive the same cached data or file. \"), mdx(\"p\", null, \"To ensure the browser makes a new request everytime, we can trick the browser into thinking it is given a new URL every time. One way to do this is by adding a random number to the end of the JSONP URL before it given the new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" element. \"), mdx(\"p\", null, \"Instead of a URL like this: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const url =  \\\"http://example.com/?callback=functionName\\\"\\n\")), mdx(\"p\", null, \"We have one like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const url =  \\\"http://example.com/?callback=functionName\\\"+\\\"&random=\\\"+ (new Date()).getTime();\\n\")), mdx(\"p\", null, \"Above, we have added a new parameter called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"random\"), \" to the end of the url, with a random value corresponding to the current time in milliseconds. Even though the web service will ignore this parameter, it will help prevent browser caching. \"), mdx(\"p\", null, \"The generated URL will look similar to this: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://example.com/?callback=functionName&random=1630390066566\"), \";\"), mdx(\"p\", null, \"The value of the random parameter will change every time, hereby preventing browser caching. When used together with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setInterval\"), \" method to make multiple JSONP requests, the browser does not cache the response, and we get new data every time.\"), mdx(\"p\", null, \"This concludes this article on how to retrieve data from a web service using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" element. Here are some differences between this approach and XMLHttpRequest:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The response we receive via XMLHttpRequest is a string, whereas with JSONP, the data we receive is a JavaScript object parsed by the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<script>\"), \" tag. To get an object out of the XMLHttpRequest string response, we use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"JSON.parse\"), \". \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"XMLHttpRequest has security restrictions. It does not let you make requests to other domains. JSONP doesn\\u2019t, it allows retrieval of JSON from external services like Google and Twitter. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"With XMLHttpRequest, you can decide what data gets parsed in JavaScript object. JSONP parses all the data it receives. This can be an advantage, since JSONP saves effort/time by just presenting parsed data. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"JSONP is supported on every browser. Some older browsers do not support XMLHttpRequest, and need extra code to work around. \")), mdx(\"p\", null, \"When using JSONP, it is recommended to put this \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" tag just before the closing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<body>\"), \" tag of your HTML file. This ensures that the page is loaded first, before a callback is made. \"), mdx(\"h4\", null, \"When to use XMLHttpRequest vs JSONP:\"), mdx(\"p\", null, \"XMLHttpRequest is ideal when you are using your own web service on same domain the request is made from. it is more secure. A web service is simply web API that can be accessed via HTTP. \"), mdx(\"p\", null, \"Ideally, use JSONP when retrieving data from a web service hosted on a remote server. This only works if the service supports JSONP. JSONP is not very secure. Just like when linking to third-party libraries using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" element, be careful. \"), mdx(\"p\", null, \"XMLHttpRequest does not allow requests from a server different from the one where your HTML and JavaScript are being served. This behevior is enforced by browser security policy in order to prevent malicious JavaScript from accessing webpages and user cookies. To workaround this restriction, we can use JSONP to access web services. \"), mdx(\"p\", null, \"JSONP is a technique of getting data using the HTML \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" element. The JSON data retrieved with a JSONP request is wrapped in JavaScript, usually a JavaScript function call which is called a \\u201Ccallback\\u201D. This callback function can be specified as a query parameter attached to the JSON URL. \"), mdx(\"p\", null, \"Note that XHR and JSONP are old techniques. The  modern alternative is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fetch()\"), \" interface, which can achieve the same functionality as XHR using promises instead of callbacks. \"));\n}\n;\nMDXContent.isMDXComponent = true;"}}},
    "staticQueryHashes": ["3128451518"]}