{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/javascript-regex-crash-course/","result":{"data":{"site":{"siteMetadata":{"title":"Enjeck's Personal Website","author":"Enjeck Cleopatra"}},"mdx":{"id":"8721b543-64ef-58f6-95ba-1e6781e5cdc3","excerpt":"Regular expressions are a method to describe patterns in string data. Regular expressions form a tiny, separate language part of many languages, includingâ€¦","frontmatter":{"title":"JavaScript regular expressions crash course","date":"February 24, 2022"},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"JavaScript regular expressions crash course\",\n  \"date\": \"2022-02-24\",\n  \"categories\": [\"JavaScript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Regular expressions are a method to describe patterns in string data. Regular expressions form a tiny, separate language part of many languages, including JavaScript. \"), mdx(\"p\", null, \"Admittedly, regular expressions have a cryptic syntax and are often difficult to write. Knowing how to write them does come in handy in the real world, especially when processing and inspecting strings. \"), mdx(\"h3\", null, \"Creating a regular expression\"), mdx(\"p\", null, \"In JavaScript, a regular expression is an object, constructed with either the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RegExp\"), \" constructor or with forward slash (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/\"), \") characters enclosing a pattern as a value (literal notation). \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let regExpres1 = new RegExp(\\\"xyz\\\");\\nlet regExpres2 = /xyz/\\n\")), mdx(\"p\", null, \"Both of the above regular expression objects represent a pattern of a character \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"x\"), \" followed by a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"b\"), \" character followed by a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"c\"), \". \"), mdx(\"p\", null, \"When creating a regular expression using the RegExp constructor, the pattern is written like a normal string. Here, backslashes can be used as usual.\\nWhereas, regular expressions defined using the literal notation deal with backslashes differently. A forward slash denotes the start and the end of the pattern, so we have to place a backslash before any forward slash that we want to be part of the pattern. If a backslash is not part of a special character (such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\n\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\t\"), \"), it is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"preserved\"), \" instead of ignored (treated as a string) and will therefore change the meaning of the pattern. \"), mdx(\"h3\", null, \"Handling special characters\"), mdx(\"p\", null, \"Characters like plus signs (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"+\"), \") and question marks (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"?\"), \") have special meanings in regular expressions and need to be preceded by a backslash if you want to indicate the character itself. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let helloQuestion = /hello\\\\?/\\n\")), mdx(\"h3\", null, \"Checking for a match\"), mdx(\"p\", null, \"Like \\u201Cnormal\\u201D objects, regular expressions have methods. The most common method is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"test()\"), \", which accepts a string and returns a Boolean that tells you whether the string matches the pattern in the expression. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"console.log(/xyz/.test(\\\"abcxyz\\\"));\\n// \\u2192 true\\nconsole.log(/xyz/.test(\\\"axyzbc\\\"));\\n// \\u2192 true\\nconsole.log(/xyz/.test(\\\"uvwxzya\\\"));\\n// \\u2192 false\\n\")), mdx(\"p\", null, \"When there are no special characters, a group of characters represents that sequence of characters. In the example above, we are testing if \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"xyz\"), \" occurs anywhere in the string. This is a rather simple test that can easily be replicated using indexOf. Regular expressions are not made for such simple cases. Their power lies in their ability to allow us to express complex patterns, as you will see below.\"), mdx(\"h3\", null, \"Matching complex patterns\"), mdx(\"h4\", null, \"Sets of characters\"), mdx(\"p\", null, \"Suppose we want to match a set of characters, say, any Latin letter. Placing a set of characters between square brackets matches that part of the regular expression to any of the characters within the brackets. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"console.log(/[abcdefghijklmnopqrstuvwxyz]/.test(\\\"year 2021\\\"));\\n// \\u2192 true\\n\")), mdx(\"h4\", null, \"Ranges of characters\"), mdx(\"p\", null, \"The above expression matches all strings that contain lowercase Latin letters. We can make the expression shorter by using a hyphen (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-\"), \"). A hyphen between two characters between square brackets represents a range of characters. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"console.log(/[a-z]/.test(\\\"year 2021\\\"));\\n// \\u2192 true\\n\")), mdx(\"p\", null, \"We can similarly test for numbers:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"console.log(/[0123456789]/.test(\\\"year 2021\\\"));\\n// \\u2192 true\\nconsole.log(/[0-9]/.test(\\\"year 2021\\\"));\\n// \\u2192 true\\n\")), mdx(\"p\", null, \"For a range of characters indicated with a hyphen, the ordering of the characters is determined by their Unicode number. For example, characters \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"a-z\"), \" (codes 97-122) are next to each in the Unicode ordering, and so using range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[a-z]\"), \" includes every character in this range and matches all lowercase Latin letters.\"), mdx(\"h4\", null, \"Character groups shorthand\"), mdx(\"p\", null, \"In regular expressions, character sets/groups have a built-in shorthand for writing them. Digits (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[0-9]\"), \") can be represented as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\d\"), \". Here are some common character sets and their shorthand codes:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Character\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Purpose\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\\\d\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A digit character\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\\\D\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A character that is not a digit\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\\\w\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"An alphanumeric character (\\u201Cword character\\u201D)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\\\W\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A nonalphanumeric character\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\\\s\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Any whitespace character (space, tab, newline, and similar)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\\\S\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Any character except for newline\")))), mdx(\"p\", null, \"If we want to match a phone number with format \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"XXX-XXX-XXXX\"), \", here\\u2019s how we can do it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let phoneNum = /\\\\d\\\\d\\\\d-\\\\d\\\\d\\\\d-\\\\d\\\\d\\\\d\\\\d/\\nconsole.log(phoneNum.test(\\\"202-588-6500\\\"));\\n// \\u2192 true\\nconsole.log(phoneNum.test(\\\"67-500-647\\\"));\\n// \\u2192 false\\n\")), mdx(\"h4\", null, \"Special characters\"), mdx(\"p\", null, \"These shorthand codes can also be used within square brackets to indicate a set of characters. For example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[\\\\d]\"), \" represents any digit. When special characters like the period (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".\"), \") and the plus (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"+\"), \") are used between square brackets, they lose their special meaning. So, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[.+]\"), \" matches any period or plus character. \"), mdx(\"h4\", null, \"Exclude characters\"), mdx(\"p\", null, \"The caret (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"^\"), \") character lets you invert a set of characters. That is, it matches any character except the character(s) in the given set. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let notNumber = /[^\\\\d]/;\\nconsole.log(notNumber.test(\\\"ujdhf345kd\\\"));\\n// \\u2192 true\\nconsole.log(notNumber.test(\\\"3453\\\"));\\n// \\u2192 false\\n\")), mdx(\"h4\", null, \"Repeated patterns\"), mdx(\"p\", null, \"Let\\u2019s revisit the phone number matching code from earlier. The code works. But it looks very clunky and awkward to write. There are too many \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\d\"), \"\\u2019s, which make it difficult to see the pattern we are trying to represent. To match repeating parts of a pattern, such as a sequence of digits, we use the plus sign (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"+\"), \"). When the plus sign follows a character or group of characters, this indicates that the character(s) may be repeated more than once. For example, the expression \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/\\\\d+/\"), \" matches one or more digit characters. So, we can shorten our phone number matching code to:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let phoneNum = /\\\\d+-\\\\d+-\\\\d+/\\nconsole.log(phoneNum.test(\\\"202-588-6500\\\"));\\n// \\u2192 true\\nconsole.log(phoneNum.test(\\\"67-500-647\\\"));\\n// \\u2192 true\\n\")), mdx(\"p\", null, \"The plus symbol matches a pattern at least once. To allow a match of zero or more times, we use the asterisk (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*\"), \"). Note that the asterisk does not stop a pattern from matching \\u2014 it just matches zero instances if the pattern does not exist. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"console.log(/'\\\\d*'/.test(\\\"'890'\\\"));\\n// \\u2192 true\\nconsole.log(/'\\\\d*'/.test(\\\"''\\\"));\\n// \\u2192 true\\n\")), mdx(\"p\", null, \"The previous phone number code is much more concise, but it also matches other formats in addition to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"XXX-XXX-XXXX\"), \" format we expect it to. That\\u2019s because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/\\\\d+/\"), \" matches any number of digits. \"), mdx(\"p\", null, \"To specify the number of times a pattern should occur, we use numbers within braces after an element. For example, using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{3}\"), \" after an element specifies that the element should occur exactly three times. We can also specify a range by separating two numbers with a comma. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{3, 5}\"), \" indicates that the element should occur at least thrice and at most five times. We can specify open-ended ranges by omitting a second number after the comma. So, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{3,}\"), \" means three or more times. \"), mdx(\"p\", null, \"Here\\u2019s another modification of our phone number verification code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let phoneNum = /\\\\d{3}-\\\\d{3}-\\\\d{4}/\\nconsole.log(phoneNum.test(\\\"202-588-6500\\\"));\\n// \\u2192 true\\nconsole.log(phoneNum.test(\\\"67-500-647\\\"));\\n// \\u2192 false\\n\")), mdx(\"h4\", null, \"Optional characters\"), mdx(\"p\", null, \"Phone numbers are usually valid even when they are not hyphenated. We can make the hyphen optional. To make a part of a pattern optional, we use the question mark (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"?\"), \"). It allows a character to occur zero or one number of times. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let phoneNum = /\\\\d{3}-?\\\\d{3}-?\\\\d{4}/\\nconsole.log(phoneNum.test(\\\"202-588-6500\\\"));\\n// \\u2192 true\\nconsole.log(phoneNum.test(\\\"2025886500\\\"));\\n// \\u2192 true\\n\")), mdx(\"p\", null, \"In the above example, the pattern matches even when the hyphen character (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-\"), \") is omitted. \"), mdx(\"h4\", null, \"Group characters\"), mdx(\"p\", null, \"We enclose multiple elements within parentheses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"()\"), \" to treat them as a single element when using operators like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"+\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*\"), \". When a part of a regular expression is surrounded by parentheses, it is treated as a single element by any operations following it. Below, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"+\"), \" applies to the group \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ho\"), \" and it matches one or more sequences like it.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let santaLaugh = /(ho)+/i;\\nconsole.log(santaLaugh.test(\\\"hohohoho\\\"));\\n// \\u2192 true\\n\")), mdx(\"h4\", null, \"Case sensitivity\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i\"), \" character at the end of the expression makes the regular expression case-insensitive. The code below matches the uppercase \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"H\"), \" in the input string, even though the actual pattern is all lowercase. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let santaLaugh = /(ho)+/i;\\nconsole.log(santaLaugh.test(\\\"Hohohoho\\\"));\\n// \\u2192 true\\n\")), mdx(\"h4\", null, \"Matching within boundaries\"), mdx(\"p\", null, \"To make a matching span through an entire string, we use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"^\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$\"), \" characters. The dollar sign matches the end of the input string, while the caret matches the start. The expression \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/^\\\\d+$/\"), \" matches a string that is made up of numbers from start to end. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/^a/\"), \" matches a string that starts with the letter \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/!$/\"), \" matches a string that ends with an exclamation mark. \"), mdx(\"p\", null, \"The marker \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\b\"), \" refers to a word boundary, which can be the start or end of the string. It can also refer to any place in the string that has a word character on one side and a non-word character on the other side. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"console.log(/pp/.test(\\\"happy\\\"));\\n// \\u2192 true\\nconsole.log(/\\\\bpp\\\\b/.test(\\\"happy\\\"));\\n// \\u2192 false\\n\")), mdx(\"p\", null, \"A boundary marker matches an expression only when a specific condition holds at the point it exists in the pattern. It does not match an actual character. \"), mdx(\"p\", null, \"We use the pipe character \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(|)\"), \" to indicate a choice between a pattern to its left and that to its right. For example, we can match a text that contains the word \\u201Cwatch\\u201D in either its plural (ending with \\u201Ces\\u201D) form, past tense (ending with \\u201Ced\\u201D), or personal noun (ending with \\u201Cer\\u201D) form. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let word = /\\\\b\\\\watch(es|ed|er)?\\\\b/;\\nconsole.log(word.test(\\\"watch\\\"));\\n// \\u2192 true\\nconsole.log(word.test(\\\"watched\\\"));\\n// \\u2192 true\\nconsole.log(word.test(\\\"watcherrr\\\"));\\n// \\u2192 false\\n\")), mdx(\"p\", null, \"In the above example, we use parentheses to limit the section of the expression that the pipe operator should be applied to. \"), mdx(\"h3\", null, \"Other methods for matching\"), mdx(\"p\", null, \"Unlike the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"test()\"), \" method that returns only true or false depending on whether or not the pattern matched, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"exec()\"), \" (execute) method returns an object with information about the match if a match is found and it returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" otherwise. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let execMatch = /\\\\d+/.exec(\\\"abc 123\\\");\\nconsole.log(execMatch);\\n// \\u2192 Array [ \\\"123\\\" ]\\nconsole.log(execMatch.index);\\n// \\u2192 4\\n\\nlet execMatch2 = /\\\\d+/.exec(\\\"abc\\\");\\nconsole.log(execMatch2);\\n// \\u2192 null\\n\")), mdx(\"p\", null, \"When we log \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"execMatch\"), \", we see an array whose first element is a sequence of the successful match. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"exec()\"), \" has an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index\"), \" property that tells us the position where the successful match begins. \"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"match()\"), \" method for strings behaves like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"exec()\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"console.log(\\\"abc 123\\\".match(/\\\\d+/));\\n// \\u2192 Array [ \\\"123\\\" ]\\n\")), mdx(\"p\", null, \"If the regular expression has subexpressions within parentheses, any text matching these subexpressions will be shown in the array. The first element of the array is always the whole match. The next element, if it exists, is the part matched by the first subexpression \\u2014 that is, the subexpression whose opening parentheses appear first in the expression \\u2014 then the second expression, and so on.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let quoted = /'([^']*)'/\\nconsole.log(quoted.exec(\\\"I said 'yes' to his proposal\\\"));\\n// \\u2192 Array [ \\\"'yes'\\\", \\\"yes\\\" ]\\n\")), mdx(\"p\", null, \"When a subexpression grouped in parentheses does not have a match in the input string (for example, when the subexpression is followed by a question mark), the value \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undefined\"), \" is returned in its place in the output array. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"console.log(/program(mer)?/.exec(\\\"program\\\"));\\n// \\u2192 Array [ \\\"program\\\", undefined ]\\nconsole.log(/(\\\\w)+/.exec(\\\"abc\\\"));\\n// \\u2192 Array [ \\\"abc\\\", \\\"c\\\" ]\\n\")), mdx(\"h3\", null, \"Matching and replacing\"), mdx(\"p\", null, \"The replace method can be used on strings to replace part of a string with another string. For example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"console.log(\\\"haha\\\".replace(\\\"a\\\", \\\"e\\\"));\\n// \\u2192 heha\\n\")), mdx(\"p\", null, \"The first argument of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"replace()\"), \" method can be a regular expression. Here, the first match of the regular expression is replaced. To replace all matches in a string rather than just the first, add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"g\"), \" (global) option to the regular expression. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"console.log(\\\"hahehahehe\\\".replace(/a/, \\\"e\\\"));\\n// \\u2192 hehehahehe\\nconsole.log(\\\"hahehahehe\\\".replace(/a/g, \\\"e\\\"));\\n// \\u2192 hehehehehe\\n\")), mdx(\"p\", null, \"The above behavior of replacing all matches in a string can be replicated using JavaScript\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"replaceAll()\"), \" method without having to use regular expressions at all. The advantage of using regular expressions with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"replace()\"), \" method is that we can mention matched subexpression groups. For example, say we a string with two numbers \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"2 3\"), \" and we want to swap their positions to say \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"3 2\"), \" instead:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"console.log(\\\"2 3\\\".replace(/(\\\\w+) (\\\\w+)/g, \\\"$2 $1\\\"));\\n// \\u2192 3 2\\n\")), mdx(\"p\", null, \"In the above code, the groups \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(\\\\w+)\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(\\\\w+)\"), \" are associated with the characters \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$1\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$2\"), \" in the replacement string. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$1\"), \" is replaced by the text matching the first group, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$2\"), \" by the second group. The entire match can be referenced with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$&\"), \". \"), mdx(\"p\", null, \"Instead of a string, we may decide to pass a function as the second argument of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"replace()\"), \" method. For each replacement, the function is called with the matched subexpression groups as arguments, and then the return value is added to the new string. The following code accepts a function as a second argument and converts specific strings to uppercase:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let phrase = \\\"unicef is a humanitarian ngo.\\\";\\nlet re = phrase.replace(/\\\\b(unicef|ngo)\\\\b/g, word => word.toUpperCase())\\nconsole.log(re);\\n// \\u2192 UNICEF is a humanitarian NGO.\\n\")), mdx(\"h3\", null, \"Regex constructor VS literal notation\"), mdx(\"p\", null, \"When writing your code, you may not know the actual pattern you are expected to match. In this case, you can dynamically create RegExp objects. Suppose you want to look for a particular word in a sentence and surround it with quotation marks. Since this word will only be known during program execution, it is better to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RegExp\"), \" constructor rather than literal notation. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let word = \\\"hello\\\";\\nlet sentence = \\\"Mary says hello.\\\";\\nlet re = new RegExp(\\\"\\\\\\\\b(\\\" + word + \\\")\\\\\\\\b\\\", \\\"i\\\");\\nconsole.log(sentence.replace(re, \\\"'$1'\\\"));\\n// \\u2192 Mary says 'hello'.\\n\")), mdx(\"p\", null, \"Notice that because we are writing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\b\"), \" boundary markers as a regular string, we use two backslashes when creating the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\b\"), \" boundary marker in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RegExp\"), \" constructor. The second argument given to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RegExp\"), \" constructor holds the options for the regular expression, such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i\"), \" for case-insensitivity in this example. \"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"indexOf()\"), \" string method is usually used to get the position of a character or group of characters in a string. Its main drawback is it does not accept regular expressions. To use regular expressions to determine the index of a character, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"search()\"), \" method comes in handy. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"console.log(\\\"year 2021\\\".search(/\\\\d/));\\n// \\u2192 5\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/blog/javascript-regex-crash-course/","previous":{"id":"ab65c749-71d5-5c5b-8eb7-498ebf217010","fields":{"slug":"/blog/predict-change-differential-equations/"},"frontmatter":{"title":"Predictive modeling of weight changes using differential equations"},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Predictive modeling of weight changes using differential equations\",\n  \"date\": \"2021-11-08\",\n  \"categories\": [\"math\", \"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Inspired by my own challenges with weight fluctuations, I wanted to explore how people\\u2019s weight might change based on calorie consumption. This article details how I went about modelling weight change with differential equations, and building a web application around this model. With the web app, users can enter personal information and see how their weight might change per month over time. This data will be visualized using a table and a line graph.\"), mdx(\"p\", null, \"Here is the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://enjeck.com/weight-change-prediction/\"\n  }, \"final website\"), \".\"), mdx(\"p\", null, \"View the code on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/enjeck/weight-change-prediction\"\n  }, \"GitHub\"), \".\"), mdx(\"h2\", null, \"The mathematical model\"), mdx(\"p\", null, \"Differential equations have many applications in the real world.\\nThey are especially useful whenever you want to model how a system changes with respect to something, usually time. It can be a mechanical system like a pendulum, a dynamic system like the interaction of planets in space, an economic system like population decline/explosion, and so much more. For this project, the goal was to apply differential equations to build a model for predicting human weight changes based on calorie consumption.\"), mdx(\"p\", null, \"Initially, I considered basing my model on energy expenditure per kilogram. The daily rate of energy expenditure is between 35 and 45 calories per kg per day, depending on the person\\u2019s sex, age, activity level, and other factors. I was not sure how to adjust this daily energy expenditure to reflect these factors. For simplicity, I could have just assumed that a person\\u2019s daily average energy expenditure is the mean of 35 and 45, which is 40 calories per kg per day. Rather than make this assumption, I decided to use the basal metabolic rate.\"), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Basal_metabolic_rate\"\n  }, \"basal metabolic rate (BMR)\"), \" is the rate of energy expenditure per unit time by endothermic animals at rest. The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Basal_metabolic_rate#BMR_estimation_formulas\"\n  }, \"Mifflin St Jeor equation\"), \" is considered one of the most accurate formula to calculate BMR:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"P = \\\\left({10.0m \\\\over 1kg} + {6.25h\\\\over 1cm} - {5.0a\\\\over 1year} + s \\\\right) \\\\frac{kcal}{day}\"), mdx(\"p\", null, \"where,\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"m\"), \" = body mass in kg\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"h\"), \" = height in cm\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"a\"), \" = age in years\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"s\"), \" = +5 for men and -161 for women\")), mdx(\"p\", null, \"For example, a 25-year-old woman weighing 80kg and 170cm tall would have a BMR of 1576.5 kcal per day. This value is the number of calories her body spends at complete rest. Performing activities like going to work, doing house chores, or exercising increases the total daily expenditure. A normal person does not spend all day at rest, so we can scale the BMR, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"P\"), \", by an \\u201Cactivity factor\\u201D which depends on daily activities. The value of this activity factor varies based on activity:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Level of Activity\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Activity factor\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Bed rest (Bedridden - Unconscious)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.0-1.1\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Sedentary (Little to no exercise )\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.2\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Light exercise (1-3 days per week)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.3\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Moderate exercise (3-5 days per week)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.5\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Heavy exercise (6-7 days per week)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.7\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Very heavy exercise (twice per day, extra heavy workouts)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.9\")))), mdx(\"p\", null, \"Including this activity factor, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"f\"), \", into the BMR formula, we get our estimated total daily energy expenditure, which we shall call \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"T\"), \",\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"T = f (10m + 6.25h - 5a + s)\"), mdx(\"p\", null, \"According to the activity factor chart, if the woman in the aforementioned example does light exercise, her total daily energy expenditure is 1.3\", \"*\", \"1576.5 \\u2248 2050. What does this mean in terms of weight change? It means in order to lose weight, this woman must consume less than 2050 calories daily. Consuming more than 2050 calories will result in weight gain.\"), mdx(\"p\", null, \"No matter the approach taken to build a mathematical model for weight change, we shall always end up using the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/First_law_of_thermodynamics\"\n  }, \"first law of thermodynamics\"), \" to create an equation expressed in terms of exponential decay or growth.\"), mdx(\"p\", null, \"The fact that the equation will have an exponential term (that is, using Euler\\u2019s number, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"e\"), \") makes sense, when you come to think of it. For clarity, suppose the woman in the example above wants to lose weight. It is estimated that 7700 calories equal one kilogram. If the woman reduces her daily calorie intake to 1500 calories, this produces a deficit of 550 calories. Assuming she follows the diet strictly, in 2 weeks (14 days), this woman should accrue a total calorie deficit of 7700, which equates to 1 kilogram lost. Therefore, she should lose 2kg in 4 weeks, 3kg in 6 weeks, 6kg in 8 weeks, right?\"), mdx(\"p\", null, \"Wrong!\"), mdx(\"p\", null, \"The rate of weight change is not constant, because as she loses weight, her BMR changes, which means she must adjust her calorie intake. For this reason, the weight change equation will have an exponential decay term based on time, which governs how the rate of weight loss slows down as weight (and BMR) changes.\"), mdx(\"p\", null, \"The first law of thermodynamics states that:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Change\\\\ in\\\\ energy = heat\\\\ added - work\\\\ done\\\\ by\\\\ the\\\\ system\"), mdx(\"p\", null, \"Applying this law to food eaten, we have:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Calories\\\\ surplus\\\\ or\\\\ deficit = calories\\\\ in - calories\\\\ out\"), mdx(\"p\", null, \"Let variable \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"n\"), \" represent the daily calories intake. Calories out is given by the total daily energy expenditure (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"T\"), \") value stated earlier:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Net\\\\ daily\\\\ calorie\\\\ surplus/deficit = n - T\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Net\\\\ daily\\\\ calorie\\\\ surplus/deficit = n - f (10m + 6.25h - 5a + s)\"), mdx(\"p\", null, \"Instead of using the variable \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"m\"), \", let\\u2019s replace it with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"w(t)\"), \", which represents the weight after time \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"t\"), \" (in days):\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Net\\\\ daily\\\\ calorie\\\\ surplus/deficit = n - f (10w(t) + 6.25h - 5a + s)\"), mdx(\"p\", null, \"If we estimate one kilogram to be 7700 calories, then dividing the equation by 7700 gives the weight change:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"weight\\\\ change = \\\\frac{n - f (10w(t) + 6.25h - 5a + s)}{7700}\"), mdx(\"p\", null, \"This change in weight is approximately the derivative of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"w(t)\"), \":\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{dw(t)}{dt} = \\\\frac{n - f (10w(t) + 6.25h - 5a + s)}{7700}\"), mdx(\"p\", null, \"This is a first order ordinary differential equation. We can solve for \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"w(t)\"), \" via \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Separation_of_variables\"\n  }, \"separation of variable\"), \". At first glance, the equation may not look separable, but it is.\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{dw(t)}{dt} = \\\\frac{n -10fw(t) - f(6.25h - 5a + s)}{7700}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{dw(t)}{dt} = \\\\frac{-10fw(t)}{7700} + \\\\frac{n - f(6.25h - 5a + s)}{7700}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{dw(t)}{dt} = \\\\frac{-fw(t)}{770} + \\\\frac{n - f(6.25h - 5a + s)}{7700}\"), mdx(\"p\", null, \"The differential equation has only two main variables \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"w(t)\"), \" (dependent variable) and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"t\"), \" (independent variable) because the derivative term says \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, \"\\\\frac{dw(t)}{dt}\"), \". To ease calculations, we can temporarily treat the other variables (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"f\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"h\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"a\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"s\"), \") as constants:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Let\\\\ k = \\\\frac{n - f(6.25h - 5a + s)}{7700}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{dw(t)}{dt} = \\\\frac{-fw(t)}{770} + k\"), mdx(\"p\", null, \"To separate, we multiply through by \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"dt\"), \" and divide by \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, \"\\\\frac{-fw(t)}{770} + k\")), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{dw(t)}{{-fw(t)\\\\over 770} + k} = dt\"), mdx(\"p\", null, \"Now, we proceed as we normally would when solving separable ordinary differential equations, by integrating:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\int\\\\frac{dw(t)}{{-fw(t)\\\\over 770} + k} = \\\\int{dt}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\int\\\\frac{1}{{-fw(t)\\\\over 770} + k}dw(t) = \\\\int{dt}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"{1 \\\\over {-f\\\\over 770}} \\\\log \\\\left|{{-fw(t)\\\\over 770} + k}\\\\right| = t + c_{1}\"), mdx(\"p\", null, \"where \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, \"c_1\"), \" is the constant of integration.\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\log \\\\left|{{-fw(t)\\\\over 770} + k}\\\\right| = {-f\\\\over 770} (t + c_{1})\"), mdx(\"p\", null, \"Putting everything in base \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"e\"), \", the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"log\"), \" cancels out and we get:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{-fw(t)}{770} + k = \\\\pm e^{\\\\frac{-f}{770} (t + c_1)}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{-fw(t)}{770} + k = \\\\pm c_1 e^{\\\\frac{-ft}{770}}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"\\\\frac{-fw(t)}{770} = \\\\pm c_1 e^{\\\\frac{-ft}{770}} - k\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"-fw(t) = 770(\\\\pm c_1 e^{\\\\frac{-ft}{770}} - k)\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"fw(t) = \\\\pm770 c_1 e^{\\\\frac{-ft}{770}} + 770 k\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Let\\\\ c_2 = \\\\pm770 c_1\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"fw(t) = c_2e^{\\\\frac{-ft}{770}} + 770 k\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(t) = \\\\frac{c_2e^{\\\\frac{-ft}{770}} + 770 k} {f}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(t) = \\\\frac{c_2e^{\\\\frac{-ft}{770}}}{f} + \\\\frac{770 k} {f}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"Let\\\\ c = \\\\frac{c_2}{f}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(t) = ce^{\\\\frac{-ft}{770}} + \\\\frac{770 k} {f}\"), mdx(\"p\", null, \"Replacing \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"k\"), \" with its original expression, we get:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(t) = ce^{\\\\frac{-ft}{770}} + \\\\frac{770}{f} \\\\left(\\\\frac{n - f(6.25h - 5a + s)}{7700} \\\\right)\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(t) = ce^{\\\\frac{-ft}{770}} + \\\\frac{n - f(6.25h - 5a + s)}{10f}\"), mdx(\"p\", null, \"We can now solve for the constant \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"c\"), \". Generally, at the starting weight, t = 0 (that is, at day 0). Substituting \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"t = 0\"), \" in the equation, we get:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(0) = ce^{0} + \\\\frac{n - f(6.25h - 5a + s)}{10f}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(0) = c + \\\\frac{n - f(6.25h - 5a + s)}{10f}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"c = w(0) - \\\\frac{n - f(6.25h - 5a + s)}{10f}\"), mdx(\"p\", null, \"For any person, given a starting weight \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"w(0)\"), \", number of calories eaten per day \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"n\"), \", activity factor \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"f\"), \", height \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"h\"), \", age \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"a\"), \" and sex \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"s\"), \", we can calculate the constant \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"c\"), \". The value of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"c\"), \" will then be substituted back into the equation, and can be used to calculate the weight after any amount of time, e.g after 1 year.\"), mdx(\"p\", null, \"Let\\u2019s consider the example woman again. She is 25 years old, initially weighs 80kg, 170cm in height and eats 1500 calories daily.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"f = 1.3\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"h = 170cm\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"s = -161\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"w(0) = 80kg\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a = 25\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"n = 1500\")), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"c = 80 - \\\\frac{1500 - 1.3(6.25(170) - 5(25) -161)}{10(1.3)}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"c = 80 - 37.7\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"c = 42.3\"), mdx(\"p\", null, \"Fitting \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"c = 42.3\"), \" into the original equation, we get the following solution for this woman:\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(t) = 42.3e^{\\\\frac{-ft}{770}} + \\\\frac{n - f(6.25h - 5a + s)}{10f}\"), mdx(\"p\", null, \"The value of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"c\"), \" varies from person to person, since it is based on personal information like age, height, activity, sex and calorie intake.\"), mdx(\"p\", null, \"For this particular woman, we can now find out her weight after 1 year (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"t\"), \" = 365 days):\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(365) = 42.3e^{\\\\frac{-(1.3)(365)}{770}} + \\\\frac{1500 - 1.3(6.25(170) - 5(25) - 161)}{10(1.3)}\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(365) = 22.8 + 37.7\"), mdx(\"div\", {\n    \"className\": \"math math-display\"\n  }, \"w(365) = 60.5\"), mdx(\"p\", null, \"So, after 1 year, this woman\\u2019s weight has dropped from 80kg to 60.5kg. Losing 19.5kg over a year is a pretty realistic prediction. After 2 years, her weight should be 50kg, a difference of 10kg from the first year\\u2019s loss. As you can see, as she loses weight over time, the rate of weight loss slows down. This is how it goes in real life.\"), mdx(\"h2\", null, \"The code\"), mdx(\"p\", null, \"The hard part is done. Now, we can easily translate the mathematical model into code. Using HTML, CSS and JavaScript, we will build a web app that accepts age, height, current weight, sex and diet as input and then shows a month-by-month prediction (in the form of a table of value and line chart) of how a person\\u2019s weight might change over 8 years. Assuming they stick to the diet, of course.\"), mdx(\"h4\", null, \"HTML\"), mdx(\"p\", null, \"For the most part, the HTML code is a series of input fields and an output area. In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<head>\"), \" of the file, there\\u2019s a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" adding the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://d3js.org/\"\n  }, \"D3.js library\"), \", that will be used to draw the line chart. All input fields are marked as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"required\"), \" to ensure that the user fills them out. The age, height, current weight and calories fields are given \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type=number\"), \" to prevent invalid non-numeric entries.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"utf-8\\\" />\\n    <meta http-equiv=\\\"x-ua-compatible\\\" content=\\\"ie=edge\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width\\\" />\\n    <title>Weight change prediction</title>\\n    <link href=\\\"styles.css\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\" />\\n    <!-- D3 library used to draw line graph -->\\n    <script src=\\\"https://cdn.jsdelivr.net/npm/d3@7\\\"></script>\\n    <script src=\\\"script.js\\\"></script>\\n  </head>\\n  <body>\\n    <div id=\\\"main\\\">\\n      <div class=\\\"intro\\\">\\n        <h1>Weight change prediction</h1>\\n        <p>\\n          If you eat X number of calories a day, will you gain or lose weight?\\n          And how does this weight change look like over time? Let's find out!\\n        </p>\\n      </div>\\n      <form id=\\\"form\\\">\\n        <!-- Series of input fields -->\\n        <label for=\\\"age\\\">Enter your age (in years): </label>\\n        <br />\\n        <input placeholder=\\\"e.g 25\\\" type=\\\"number\\\" id=\\\"age\\\" required />\\n        <br />\\n        <label for=\\\"weight\\\">Enter your current weight (in kg): </label>\\n        <br />\\n        <input type=\\\"number\\\" id=\\\"weight\\\" required />\\n        <br />\\n        <label for=\\\"height\\\">Enter your height (in cm): </label>\\n        <br />\\n        <input type=\\\"number\\\" id=\\\"height\\\" required />\\n        <br />\\n        <label for=\\\"diet\\\">How many calories will you eat daily?: </label>\\n        <br />\\n        <input type=\\\"number\\\" id=\\\"diet\\\" required />\\n        <br />\\n        <div>\\n          <p>Enter your sex:</p>\\n          <input\\n            type=\\\"radio\\\"\\n            id=\\\"sexChoice1\\\"\\n            name=\\\"sex\\\"\\n            value=\\\"male\\\"\\n            required\\n          />\\n          <label for=\\\"sexChoice1\\\">Male</label>\\n\\n          <input\\n            type=\\\"radio\\\"\\n            id=\\\"sexChoice2\\\"\\n            name=\\\"sex\\\"\\n            value=\\\"female\\\"\\n            required\\n          />\\n          <label for=\\\"sexChoice2\\\">Female</label>\\n        </div>\\n        <label for=\\\"activity\\\">How many calories will you eat daily?: </label>\\n        <br />\\n        <select name=\\\"activity\\\" id=\\\"activity\\\" required>\\n          <option value=\\\"sedentary\\\">Sedentary (Little to no exercise )</option>\\n          <option value=\\\"light-exercise\\\">\\n            Light exercise (1-3 days per week)\\n          </option>\\n          <option value=\\\"moderate-exercise\\\">\\n            Moderate exercise (3-5 days per week)\\n          </option>\\n          <option value=\\\"heavy-exercise\\\">\\n            Heavy exercise (6-7 days per week)\\n          </option>\\n          <option value=\\\"v-heavy-exercise\\\">\\n            Very heavy exercise (twice per day, extra heavy workouts)\\n          </option>\\n        </select>\\n        <br />\\n        <!-- Submit button -->\\n        <input type=\\\"submit\\\" value=\\\"Predict\\\" id=\\\"predict-btn\\\" />\\n      </form>\\n      <div id=\\\"output\\\">\\n        <h2 class=\\\"output-text\\\">Predictions over 100 months (~8 years)</h2>\\n\\n        <!-- Output area for the line chart-->\\n        <h3 class=\\\"output-text\\\">Line chart</h3>\\n        <div id=\\\"line-chart\\\"></div>\\n\\n        <!-- Output area for the table of chart-->\\n        <h3 class=\\\"output-text\\\">Table of values</h3>\\n        <div id=\\\"table\\\"></div>\\n      </div>\\n    </div>\\n  </body>\\n</html>\\n\")), mdx(\"h4\", null, \"CSS\"), mdx(\"p\", null, \"Here is some basic styling:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \".top-menu {\\n  padding: 20px 5%;\\n  display: flex;\\n  justify-content: flex-end;\\n}\\n\\n.top-menu a {\\n  font-weight: bold;\\n}\\n\\n#main {\\n  max-width: 1000px;\\n  margin: auto;\\n  padding: 10px;\\n  font-family: \\\"Courier New\\\", Courier, monospace;\\n  scroll-behavior: smooth;\\n}\\n\\n.intro h1 {\\n  text-align: center;\\n  font-weight: bold;\\n  color: blueviolet;\\n  text-shadow: 1px 1px 1px black;\\n  text-transform: uppercase;\\n}\\n\\n.intro p {\\n  font-size: 20px;\\n  margin-bottom: 40px;\\n}\\n\\n#form {\\n  padding: 20px;\\n  background: #eee;\\n}\\n\\n#form input,\\nselect {\\n  padding: 5px;\\n  font-size: 16px;\\n  margin-bottom: 20px;\\n}\\n\\n#form label {\\n  line-height: 30px;\\n}\\n\\n#form #predict-btn {\\n  outline: non;\\n  border: 0;\\n  background: blueviolet;\\n  padding: 10px 40px;\\n  margin-top: 20px;\\n  color: #fff;\\n  text-transform: uppercase;\\n  cursor: pointer;\\n  font-weight: bold;\\n}\\n\\n#output,\\n#line-chart {\\n  width: 100%;\\n  height: auto;\\n  margin: auto;\\n}\\n\\n#line-chart {\\n  display: flex;\\n  justify-content: center;\\n  margin-bottom: 40px;\\n}\\n\\nh2.output-text {\\n  color: blueviolet;\\n  text-decoration: none;\\n}\\n\\n.output-text {\\n  margin-top: 50px;\\n  text-align: center;\\n  text-decoration: underline;\\n  /* Hide the output area text by default*/\\n  display: none;\\n}\\n\\ntable {\\n  font-family: arial, sans-serif;\\n  border-collapse: collapse;\\n  max-width: 1000px;\\n  margin: auto;\\n  margin-bottom: 40px;\\n}\\n\\ntd,\\nth {\\n  border: 1px solid #dddddd;\\n  text-align: left;\\n  padding: 8px;\\n  width: 25%;\\n}\\n.red {\\n  color: red;\\n}\\n.green {\\n  color: green;\\n}\\n\")), mdx(\"h4\", null, \"JavaScript\"), mdx(\"p\", null, \"When the user submits the form (by clicking the \\u201CPredict\\u201D button), we intend to display a table of data and a graph on the same page. To make this seamless, let\\u2019s stop the default behavior of page reload upon form submission:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Prevent the page from reloading when form is submitted\\nvar form = document.getElementById(\\\"form\\\");\\nfunction handleForm(event) {\\n  event.preventDefault();\\n}\\nform.addEventListener(\\\"submit\\\", handleForm);\\n\")), mdx(\"p\", null, \"Let\\u2019s listen for when the submit button is click and then call a hander:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"document.querySelector(\\\"#predict-btn\\\").addEventListener(\\\"click\\\", predict);\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"predict\"), \" function will hold all the code required to calculate the weight changes and display on the page. Henceforth, every code snippet is placed within \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"predict\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function predict() {\\n  // Main code in here\\n}\\n\")), mdx(\"p\", null, \"The following code retrieves data entered into the form\\u2019s input fields.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Get various values entered by user\\nlet a = parseFloat(document.querySelector(\\\"#age\\\").value);\\nlet h = parseFloat(document.querySelector(\\\"#height\\\").value);\\nlet w_0 = parseFloat(document.querySelector(\\\"#weight\\\").value);\\nlet s, f;\\nlet sex_value = document.querySelector(\\\"input[name=sex]:checked\\\").value;\\nlet activity_value = document.querySelector(\\\"#activity\\\").value;\\nlet n = parseFloat(document.querySelector(\\\"#diet\\\").value);\\n\")), mdx(\"p\", null, \"Next, we validate user input. If a field is left empty or filled with a wrong data type, we exit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"predict\"), \" function and the user is automatically shown an error message next to the problematic input.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"if (isNaN(n) || isNaN(h) || isNaN(w_0) || isNaN(a) || sex_value === \\\"\\\") {\\n  return;\\n}\\n\")), mdx(\"p\", null, \"Recall that from our mathematical model, the numeric values assigned to \\u201Csex\\u201D and \\u201Cactivity factor\\u201D vary. We can handle these using an if-else and switch statement respectively:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Set value based on sex\\nif (sex_value === \\\"female\\\") {\\n  s = -161;\\n} else {\\n  s = 5;\\n}\\n\\n// Set activity value based on selected activity\\nswitch (activity_value) {\\n  case \\\"sedentary\\\":\\n    f = 1.2;\\n    break;\\n  case \\\"light-exercise\\\":\\n    f = 1.3;\\n    break;\\n  case \\\"moderate-exercise\\\":\\n    f = 1.5;\\n    break;\\n  case \\\"heavy-exercise\\\":\\n    f = 1.7;\\n    break;\\n  case \\\"v-heavy-exercise\\\":\\n    f = 1.9;\\n    break;\\n  default:\\n    f = 1.2;\\n    break;\\n}\\n\")), mdx(\"p\", null, \"Using data entered by the user, we can calculate the integration constant, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"c\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Calculate the integration constant\\nlet k = (n - f * (6.25 * h - 5 * a + s)) / (10 * f);\\nlet c = w_0 - k;\\n\")), mdx(\"p\", null, \"We will create and populate the table of results using JavaScript. Let\\u2019s define the table\\u2019s markup:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let table_start = `\\n            <table>\\n              <tr>\\n              <th>Month</th>\\n              <th>Weight (kg)</th>\\n              <th>Monthly change (kg)</th>\\n              <th>Total change (kg)</th>\\n              </tr>`;\\nlet table_end = `</table>`;\\nlet table_data = \\\"\\\";\\n\")), mdx(\"p\", null, \"Defining a few variables that will be used later to populate the table and line chart:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let w_t;\\n// dataset to be used for line chart\\nlet weightTime = [{ time: 0, weight: w_0 }];\\nlet textColor;\\n\")), mdx(\"p\", null, \"Using a loop, we shall calculate the weight change for each month, insert the data into the table and also save into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"weightTime\"), \" object to be used late to construct the line chart. Notice that the loop goes from 1 to 101. Each iteration of the loop calculates the weight change at the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"j\"), \"th month. Since the calculations are done for a total of 100 months, the results gotten predict a person\\u2019s weight change over a period of about 8 years.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"for (let j = 1; j < 101; j++) {\\n  // Using the assumption that one month is 30 days\\n  let t = j * 30;\\n  w_t = c * Math.exp((f * t) / -770) + k;\\n  // Rounding to 2 decimal places\\n  w_t = Math.round((w_t + Number.EPSILON) * 100) / 100;\\n\\n  // Create and insert object\\n  let obj = {\\n    time: j,\\n    weight: w_t,\\n  };\\n  // Populate the line chart dataset\\n  weightTime.push(obj);\\n\\n  let prev_t = (j - 1) * 30;\\n  let prev_w_t = c * Math.exp((f * prev_t) / -770) + k;\\n  let diff_w_t = w_t - prev_w_t;\\n  let diff_w_t_round = Math.round((diff_w_t + Number.EPSILON) * 100) / 100;\\n  let diff_w_0 = w_t - w_0;\\n  let diff_w_0_round = Math.round((diff_w_0 + Number.EPSILON) * 100) / 100;\\n\\n  let sign;\\n  /* If the weight change is less than starting weight,\\n        give text a class corresponding to red color . Otherwise,\\n        green text*/\\n  /* Put plus sign in front of positive values */\\n\\n  if (diff_w_t < 0) {\\n    textColor = \\\"red\\\";\\n    sign = \\\"\\\";\\n  } else {\\n    textColor = \\\"green\\\";\\n    sign = \\\"+\\\";\\n  }\\n\\n  table_data += `\\n            <tr>\\n            <td> ${j}</td>\\n            <td>${w_t}</td>\\n            <td class=\\\"${textColor}\\\">${sign}${diff_w_t_round}</td>\\n            <td class=\\\"${textColor}\\\">${sign}${diff_w_0_round}</td>\\n            </tr>`;\\n}\\n\")), mdx(\"p\", null, \"With the table populated with data, we can now fully build it and show it to the user:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let table = table_start + table_data + table_end;\\ntable = new DOMParser().parseFromString(table, \\\"text/xml\\\");\\nconst output = document.getElementById(\\\"table\\\");\\nif (output.innerHTML) {\\n  // Prevent multiple tables from being added\\n  // Force every added table to replace previous table\\n  output.innerHTML = \\\"\\\";\\n  output.appendChild(table.documentElement);\\n} else {\\n  output.appendChild(table.documentElement);\\n}\\n\")), mdx(\"p\", null, \"Using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DomParser()\"), \" to create a DOM element from a string might lead to some weird layout issues, which are very apparent with table. To fix this issue, we can copy the table and reinsert it to the page again:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Workaround to fix table layout bug\\ntable = output.innerHTML;\\noutput.innerHTML = table;\\n\")), mdx(\"p\", null, \"A table is a good way to display our data. But it does not adequately visualize the weight changes. It will be nice to have a graphical representation of a person\\u2019s historical weight change, connected as a series of data points with a continous line. A line chart is ideal in the scenario. The D3.js library helps us do this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"/* Creating the bar chart */\\n// set the dimensions of the graph\\nwidth = Math.min(800, window.innerWidth / 1.1);\\nheight = Math.max(width, 600);\\n\\n// append the svg object to the body of the page\\ndocument.getElementById(\\\"line-chart\\\").innerHTML = \\\"\\\";\\nvar svg = d3\\n  .select(\\\"#line-chart\\\")\\n  .append(\\\"svg\\\")\\n  .attr(\\\"width\\\", width)\\n  .attr(\\\"height\\\", height);\\n\\nlet lastEl = weightTime[weightTime.length - 1];\\n\\n// Calculate the axis values\\nvar xScale = d3\\n    .scaleLinear()\\n    .domain([0, lastEl.time + 1])\\n    .range([0, width / 1.2]),\\n  yScale = d3\\n    .scaleLinear()\\n    .domain([\\n      Math.min(w_0 - 5, lastEl.weight - 5),\\n      Math.max(w_0 + 2, lastEl.weight + 2),\\n    ])\\n    .range([height / 1.2, 0]);\\n\\nvar g = svg.append(\\\"g\\\").attr(\\\"transform\\\", \\\"translate(\\\" + 50 + \\\",\\\" + 50 + \\\")\\\");\\n\\n// X-axis label\\nsvg\\n  .append(\\\"text\\\")\\n  .attr(\\\"x\\\", width / 2.2)\\n  .attr(\\\"y\\\", height / 1.05 + 10)\\n  .attr(\\\"text-anchor\\\", \\\"middle\\\")\\n  .style(\\\"font-family\\\", \\\"Helvetica\\\")\\n  .style(\\\"font-size\\\", 10)\\n  .style(\\\"font-weight\\\", \\\"bold\\\")\\n  .text(\\\"Time in months\\\");\\n\\n// Y-axis label\\nsvg\\n  .append(\\\"text\\\")\\n  .attr(\\\"text-anchor\\\", \\\"middle\\\")\\n  .attr(\\\"transform\\\", \\\"translate(20,\\\" + height / 2 + \\\")rotate(-90)\\\")\\n  .style(\\\"font-family\\\", \\\"Helvetica\\\")\\n  .style(\\\"font-size\\\", 10)\\n  .style(\\\"font-weight\\\", \\\"bold\\\")\\n  .text(\\\"Weight in kilograms\\\");\\n\\n// X-axis scale\\ng.append(\\\"g\\\")\\n  .attr(\\\"transform\\\", \\\"translate(0,\\\" + height / 1.2 + \\\")\\\")\\n  .call(d3.axisBottom(xScale));\\n\\ng.append(\\\"g\\\").call(d3.axisLeft(yScale));\\n\\n// Dots\\nsvg\\n  .append(\\\"g\\\")\\n  .selectAll(\\\"dot\\\")\\n  .data(weightTime)\\n  .enter()\\n  .append(\\\"circle\\\")\\n  .attr(\\\"cx\\\", function (d) {\\n    return xScale(d.time);\\n  })\\n  .attr(\\\"cy\\\", function (d) {\\n    return yScale(d.weight);\\n  })\\n  .attr(\\\"r\\\", 3)\\n  .attr(\\\"transform\\\", \\\"translate(\\\" + 50 + \\\",\\\" + 50 + \\\")\\\")\\n  .style(\\\"fill\\\", textColor);\\n\\n// Line\\nvar line = d3\\n  .line()\\n  .x(function (d) {\\n    return xScale(d.time);\\n  })\\n  .y(function (d) {\\n    return yScale(d.weight);\\n  })\\n  .curve(d3.curveMonotoneX);\\n\\nsvg\\n  .append(\\\"path\\\")\\n  .datum(weightTime)\\n  .attr(\\\"class\\\", \\\"line\\\")\\n  .attr(\\\"transform\\\", \\\"translate(\\\" + 50 + \\\",\\\" + 50 + \\\")\\\")\\n  .attr(\\\"d\\\", line)\\n  .style(\\\"fill\\\", \\\"none\\\")\\n  .style(\\\"stroke\\\", textColor)\\n  .style(\\\"stroke-width\\\", \\\"2\\\");\\n\")), mdx(\"p\", null, \"Finally, after the table and line chart are built and added to the page, let\\u2019s automatically scroll down to the output area and display hidden headings:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Automatically scroll to the output area after it is output generated\\nlet anchor = document.createElement(\\\"a\\\");\\nanchor.setAttribute(\\\"href\\\", \\\"#output\\\");\\nanchor.click();\\n\\n// Show hidden text in output area\\nlet hiddenText = document.querySelectorAll(\\\".output-text\\\");\\nfor (let m = 0; m < hiddenText.length; m++) {\\n  hiddenText[m].style.display = \\\"block\\\";\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/enjeck/weight-change-prediction/\"\n  }, \"complete source code\"), \" is available on GitHub. \"), mdx(\"h3\", null, \"Credits\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://en.wikipedia.org/wiki/Basal_metabolic_rate\"\n  }, \"https://en.wikipedia.org/wiki/Basal_metabolic_rate\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://clinmedjournals.org/articles/jnmdc/jnmdc-2-016table1.html\"\n  }, \"https://clinmedjournals.org/articles/jnmdc/jnmdc-2-016table1.html\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.researchgate.net/publication/256293379_A_Mathematical_Diet_Model\"\n  }, \"https://www.researchgate.net/publication/256293379_A_Mathematical_Diet_Model\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3975626/\"\n  }, \"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3975626/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://jeffq.com/blog/modeling-weight-loss-with-differential-equations/\"\n  }, \"http://jeffq.com/blog/modeling-weight-loss-with-differential-equations/\"))));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"c48cfeff-36a8-56b7-bf1c-327bd8d5f720","fields":{"slug":"/blog/ux-writing-tips/"},"frontmatter":{"title":"9 UX writing tips for designers and developers"},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"9 UX writing tips for designers and developers\",\n  \"date\": \"2022-03-03\",\n  \"categories\": [\"UX\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"UX writing is the practice of crafting text for digital interfaces that help users interact with products more conveniently. While it is not expected for designers and developers to be professional writers, knowing how to write UX copy is valuable when creating digital products. The following UX writing tips might help.\"), mdx(\"h3\", null, \"1) Write clearly\"), mdx(\"p\", null, \"Do not assume your reader knows the point you\\u2019re trying to make. Think about what exactly you want to say and say it clearly. No one wants to read a piece of text multiple times before understanding. A quick scan should be enough. People usually quickly scan text rather than read everything, since they lack time and have a short attention span. Therefore, every word you use should be relevant and understandable.\\nHere are some tips to help you write clearly:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use simple words. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use the active voice instead of the passive voice. Using the active voice makes sentences flow better and motivates user action. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Be uniform in your choice of possessive adjectives (like my, your, her, our). For instance, don\\u2019t write \\u201CYour account\\u201D, \\u201CMy Music\\u201D in the same menu. Pick an adjective and use it consistently. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use technical terms sparsely, and when you do, add a short definition or description. The reader might not know the service or product you are writing about. Do not assume they do. Before writing UX text, it helps to list and define the terms to use and those to avoid (such as terms that are difficult to understand, sensitive, or confusing). For example, instead of writing  \\u201CConnection error, server unreachable\\u201D, you might say \\u201CYou are offline. Check your internet connection and retry\\u201D. \")), mdx(\"h3\", null, \"2) Be concise\"), mdx(\"p\", null, \"Paradoxically, it usually takes more time to write a shorter statement than a longer one because it is harder to condense important details into a shorter statement. When working on devices with small screens such as mobile applications, there is not a lot of screen space. You, therefore, have to try to fit as much value into the little available space. Here\\u2019s how to do this:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Find a way to express concepts more succinctly. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use shorter sentences. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Write the important stuff at the beginning of the paragraph so that it is read first.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"After writing each sentence, read through it and check if there\\u2019s anything you can delete without messing up the meaning of the phrase. For example, instead of saying \\u201CConnection error, the server is unreachable. You are offline. Check your internet connection.\\u201D, you might say \\u201CNo internet\\u201D.\")), mdx(\"h3\", null, \"3) Be consistent\"), mdx(\"p\", null, \"UX text is meant to assist, not confuse. The navigation and other components of a digital product should be consistent. Not just consistent design (colors, layout, etc) but consistent text. Consistency is harder to achieve when many people are working on an application (such as in open-source software) or when there are several pages. To maintain textual consistency:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make a list of all key terms, define them, and ensure they are used consistently across all pages of the app. For open-source projects, keep this list in a public document that is accessible to contributors. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Document colors and fonts that should be used \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Don\\u2019t make the user think. Instead of using unique phrases, it might be better to give readers a familiar experience. Instead of writing \\u201CReach out\\u201D or \\u201CLet\\u2019s talk\\u201D, you could stick with \\u201CContact Us\\u201D, since it\\u2019s widely used and the users immediately understand what you mean. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do not use many synonyms throughout the product to express the same concept. For instance, if you decide to use \\u201CContact Us\\u201D, stick with it. Avoid using similar words like \\u201CSupports\\u201D, \\u201CReach out\\u201D, \\u201CGet Help\\u201D to refer to the same concept. \")), mdx(\"h3\", null, \"4) Be helpful\"), mdx(\"p\", null, \"If you\\u2019re trying to guide people, do it properly. The navigation and other components should be smooth and self-explanatory. \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Think about possible issues or points of confusion your users might encounter, then try to guide them through these using text. You can find possible user issues via user research. User research can be as simple as reading open issues (for open source projects), checking frequently asked questions on chat/support channels like Reddit, Stack Overflow, IRC channels, Discourse or just casually talking to users about their pain points. Make sure your writing answers the frequently asked questions. If there\\u2019s a feature that people are regularly asking how to use, this is an indication that you need clearer instructions. Know when instructions are necessary, and when they are, be as succinct as possible. Use simple, well-structured sentences that are straight to the point and accurate. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid forcing long instructions into an interface with limited space. Rather, link to instructions/FAQs or use tooltips.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Provide actionable error messages. For example, if you have a \\u201CNo internet connection\\u201D error message, it\\u2019s more helpful to have a button that says \\u201CRetry\\u201D rather than \\u201COK\\u201D.  \")), mdx(\"h3\", null, \"5) Write naturally\"), mdx(\"p\", null, \"The reader might not know a lot about a topic or domain as much as you do. It\\u2019s up to you to educate them, irrespective of their background and skills. \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do not use many big or uncommon words. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If you must use technical words, define them in case the reader doesn\\u2019t know what they mean.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid abbreviations, except common ones (e.g USB). If you must use uncommon abbreviations, make sure they have been defined earlier. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do some keyword research and include these keywords in your writing. Keywords are words that people usually use when searching for a resource online. Tools like Ubersuggest, Keyword Tool, and Google Trends can be used to find them. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Set a tone, depending on your audience. For example, your tone may be casual or technical/professional. What voice/tone are you trying to convey? Consider your readers before making a decision.\")), mdx(\"h3\", null, \"6) Be human\"), mdx(\"p\", null, \"It can be difficult to express human emotion via text, but it\\u2019s worth a try. Try to make the reader feel like you care about them. Be less mechanical and more emotional. Granted, it is not easy to talk naturally via written text. Speaking is easier and informal, while writing is more structured. \"), mdx(\"p\", null, \"The points below might help you infuse some human warmth into your text:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Instead of saying \\u201CThe contact form has been sent. Expect a response shortly\\u201D, say \\u201CWe have received your message. We\\u2019ll get back to you soon\\u201D. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"People from different cultures may be sensitive to be a particular topic. Keep your audience in mind.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Acting human doesn\\u2019t mean you should be sympathetic. You don\\u2019t have to be too clever or hilarious either, as this may distract from the core meaning of your text or distract the user from a task or action. All in all, it depends on your brand, tone of voice, and target audience. \")), mdx(\"h3\", null, \"7) Be structured\"), mdx(\"p\", null, \"Good information architecture is important. When the content of a site or page is well structured, it\\u2019s easier for users to find what they need. In contrast, disorganized content is hard to find and understand. When designing content, \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make a list of your objectives. Know why you\\u2019re writing, who you\\u2019re writing for and the impact your text should have. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Start with the most important content at the top of the page, and less important text below. The stuff below should still be important, but not as important as that at the top of the page. Anything that is not helpful should be removed. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use elements like titles, subtitles, and lists to organize content into sections\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use keywords in headings to attract the reader\\u2019s attention\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Arrange content such that related things are next to each other visually\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Split long text into digestible bits\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Slowly reveal the content (where possible) to avoid overwhelming the reader. \")), mdx(\"h3\", null, \"8) Be focused\"), mdx(\"p\", null, \"Yes, you have so much to say. But writing too much text may not help as much as you expect it to. There\\u2019s no guarantee everything you write will be read. \"), mdx(\"p\", null, \"Look at your content and ask yourself if every piece of text is necessary. If something is important, you can compel the reader to pay attention to it by surrounding it with adequate blank space. People find it easier to focus on something when there is more space around it. For example, a button with space around it will catch the user\\u2019s attention. Whenever you have a call to action, highlight it with whitespace. Aside from focus, whitespace around text improves readability. \"), mdx(\"h3\", null, \"9) Be inclusive and accessible\"), mdx(\"p\", null, \"Needless to say, accessibility is important. You should strive to build products that can be used by all. \"), mdx(\"p\", null, \"Accessible language is language that can be easily read and understood by everyone. The reader might have a disability such as learning difficulties, poor eyesight, color blindness, poor motor skills (that impede their ability to move a mouse or use a keyboard), or have other limitations. Put yourself in their shoes and try to accommodate them by:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Using simple words and avoiding technical terms if possible\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Providing concise, direct instructions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Using text on links to explain what should happen after clicking\")), mdx(\"p\", null, \"Inclusive language is language that is appropriate for all groups of people. Your readers might come from different cultures. Steer away from phrases or expressions that are sensitive to certain groups of people. Be respectful of others\\u2019 beliefs, and be careful not to negatively influence them with your choice of words. For example, \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Words like \\u201Cretarded\\u201D are considered offensive nowadays.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid vague and unclear groupings, for example, \\u201CAsians\\u201D. In some cases, it might not be clear who exactly qualifies as an Asian. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Unless necessary, don\\u2019t specify gender. Avoid gendered words like \\u201Csalesman\\u201D (use salesperson). Instead of saying \\u201Cwife\\u201D or \\u201Chusband\\u201D, you can say \\u201Cspouse\\u201D or \\u201Cpartner\\u201D. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid stereotypes.\")));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"staticQueryHashes":["3128451518"]}